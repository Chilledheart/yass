name: Build Artifacts (MinGW)
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
  pull_request:
  push:
    branches: [master, develop]
    paths-ignore: [README.md, BUILDING.md]
  release:
    types: [published]
env:
  CACHE_EPOCH: 0
  GOPROXY: direct
jobs:
  mingw64-release:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        arch: [x86_64, i686]
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang
        id: clang-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: Change ubuntu mirror
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/azure.archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -qq
      - name: "Install dependency: prebuilt clang and clang-tidy binaries"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          ./scripts/download-clang-prebuilt-binaries.py
          rm -f third_party/llvm-build/Release+Asserts/*.tgz
      - name: Populate depedencies
        run: sudo apt-get update -qq && sudo apt-get install -y cmake ninja-build mingw-w64 nasm zip
      - name: Set toolchain cmake files
        run: |
          cat > MinGW.cmake << EOF
          # Sample toolchain file for building for Windows from an Ubuntu Linux system.
          #
          # Typical usage:
          #    *) install cross compiler: sudo apt-get install mingw-w64
          #    *) cd build
          #    *) cmake -DCMAKE_TOOLCHAIN_FILE=~/mingw-w64-x86_64.cmake ..

          set(CMAKE_SYSTEM_NAME Windows)
          set(CMAKE_SYSTEM_PROCESSOR ${{ matrix.arch }})
          set(GNU_TARGET ${{ matrix.arch }}-w64-mingw32)

          set(CMAKE_C_COMPILER_TARGET \${GNU_TARGET} CACHE STRING "")
          set(CMAKE_CXX_COMPILER_TARGET \${GNU_TARGET} CACHE STRING "")
          set(CMAKE_ASM_COMPILER_TARGET \${GNU_TARGET} CACHE STRING "")

          set(CMAKE_ASM_FLAGS "-target \${GNU_TARGET} -ccc-gcc-name \${GNU_TARGET}-gcc")
          set(CMAKE_C_FLAGS "-target \${GNU_TARGET} -ccc-gcc-name \${GNU_TARGET}-gcc")
          set(CMAKE_CXX_FLAGS "-target \${GNU_TARGET} -ccc-gcc-name \${GNU_TARGET}-gcc")
          set(CMAKE_SHARED_LINKER_FLAGS "-target \${GNU_TARGET} -ccc-gcc-name \${GNU_TARGET}-gcc -Wl,-L/usr/lib/gcc/\${GNU_TARGET}/9.3-win32")
          set(CMAKE_EXE_LINKER_FLAGS "-target \${GNU_TARGET} -ccc-gcc-name \${GNU_TARGET}-gcc -Wl,-L/usr/lib/gcc/\${GNU_TARGET}/9.3-win32")

          # cross compilers to use for C and C++
          set(CMAKE_C_COMPILER "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/clang")
          set(CMAKE_CXX_COMPILER "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/clang++")
          set(CMAKE_LINKER "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/ld.lld")
          set(CMAKE_AR "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/llvm-ar")
          set(CMAKE_CXX_COMPILER_AR "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/llvm-ar")
          set(CMAKE_RANLIB "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/llvm-ranlib")
          set(CMAKE_CXX_COMPILER_RANLIB "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/llvm-ranlib")
          # disabled because it is missing from binary
          # set(CMAKE_RC_COMPILER "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/llvm-rc")
          set(CMAKE_RC_COMPILER "\${GNU_TARGET}-windres")

          set(CMAKE_SYSROOT "/usr/\${GNU_TARGET}" CACHE STRING "")

          # target environment on the build host system
          set(CMAKE_FIND_ROOT_PATH /usr/\${GNU_TARGET})

          # modify default behavior of FIND_XXX() commands
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          cat > Native.cmake << EOF
          set(CMAKE_C_COMPILER "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/clang")
          set(CMAKE_CXX_COMPILER "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/clang++")
          EOF
      - name: Build
        run: |
          mkdir build-mingw
          cd build-mingw
          cmake -G Ninja -DGUI=on -DBUILD_TESTS=on .. \
            -DCMAKE_TOOLCHAIN_FILE="$PWD/../MinGW.cmake" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCROSS_TOOLCHAIN_FLAGS_NATIVE=\"-DCMAKE_TOOLCHAIN_FILE=$PWD/../Native.cmake\"
          ninja yass yass_test
      - name: Packaging
        run: |
          export OBJCOPY="$PWD/third_party/llvm-build/Release+Asserts/bin/llvm-objcopy"
          if [ ! -x $OBJCOPY ]; then
            echo "llvm-objcopy not found, using stock one"
            OBJCOPY=${{ matrix.arch }}-w64-mingw32-objcopy
          fi
          cd build-mingw
          # https://www.systutorials.com/docs/linux/man/1-x86_64-w64-mingw32-objcopy/
          # create a file containing the debugging info.
          $OBJCOPY --only-keep-debug yass.exe yass.exe.dbg
          # stripped executable.
          $OBJCOPY --strip-debug yass.exe
          # to add a link to the debugging info into the stripped executable.
          $OBJCOPY --add-gnu-debuglink=yass.exe.dbg yass.exe

          export PREFIX=yass-win-mingw64-${{ matrix.arch }}-${{ github.event.release.tag_name }}
          # generate archive
          mkdir $PREFIX
          cp -f yass.exe $PREFIX/
          zip -9 -r ../$PREFIX.zip $PREFIX
          rm -rf $PREFIX

          # generate debuginfo archive
          mkdir $PREFIX
          cp -f yass.exe.dbg $PREFIX/
          zip -9 -r ../$PREFIX-debuginfo.zip $PREFIX
          rm -rf $PREFIX
      - name: Populate depedencies (Tests-i686)
        if: ${{ matrix.arch == 'i686' }}
        run: |
          # fix for missing i386 deb packages from deb.sury.org repository
          sudo add-apt-repository ppa:ondrej/php
          # alternative fix is to downgrade overloaded libpcre2 versions with five locally installed packages which are PHP-related and came from deb.sury.org repository.
          # sudo apt-get install -y --allow-downgrades libpcre2-8-0=10.34-7ubuntu0.1 libpcre2-16-0=10.34-7ubuntu0.1 libpcre2-32-0=10.34-7ubuntu0.1 libpcre2-dev=10.34-7ubuntu0.1 libgd3=2.2.5-5.2ubuntu2.1
          sudo dpkg --add-architecture i386 && sudo apt-get update -qq && sudo apt-get install -y wine wine32
      - name: Populate depedencies (Tests-x86_64)
        if: ${{ matrix.arch == 'x86_64' }}
        run: sudo apt-get update -qq && sudo apt-get install -y wine wine64
      - name: Run tests
        run: |
          cd build-mingw
          wine yass_test.exe
      - name: Upload dist tarball
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} *.zip
