name: Build Artifacts (MinGW)
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
  pull_request:
  push:
    branches: [master]
    paths-ignore: [README.md, BUILDING.md]
  release:
    types: [published]
env:
  CACHE_EPOCH: 5
  GOPROXY: direct
jobs:
  mingw64-release:
    runs-on: ubuntu-18.04
    if: ${{ github.event_name != 'release' }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
    steps:
      - uses: actions/checkout@v2
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache golang
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: Change ubuntu mirror
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -qq
      - name: Populate depedencies
        run: sudo apt-get update -qq && sudo apt-get install -y cmake ninja-build mingw-w64 nasm
      - name: Set toolchain cmake files
        run: |
          cat > MinGW.cmake << EOF
          # Sample toolchain file for building for Windows from an Ubuntu Linux system.
          #
          # Typical usage:
          #    *) install cross compiler: sudo apt-get install mingw-w64
          #    *) cd build
          #    *) cmake -DCMAKE_TOOLCHAIN_FILE=~/mingw-w64-x86_64.cmake ..

          set(CMAKE_SYSTEM_NAME Windows)
          set(CMAKE_SYSTEM_PROCESSOR x86_64)
          set(GNU_TARGET x86_64-w64-mingw32)

          # cross compilers to use for C, C++ and Fortran
          set(CMAKE_C_COMPILER \${GNU_TARGET}-gcc)
          set(CMAKE_CXX_COMPILER \${GNU_TARGET}-g++)
          set(CMAKE_Fortran_COMPILER \${GNU_TARGET}-gfortran)
          set(CMAKE_LINKER \${GNU_TARGET}-ld)
          set(CMAKE_AR \${GNU_TARGET}-ar)
          set(CMAKE_AS \${GNU_TARGET}-as)
          set(CMAKE_RANLIB \${GNU_TARGET}-ranlib)
          set(CMAKE_RC_COMPILER \${GNU_TARGET}-windres)

          # target environment on the build host system
          set(CMAKE_FIND_ROOT_PATH /usr/\${GNU_TARGET})

          # modify default behavior of FIND_XXX() commands
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          cat > Native.cmake << EOF
          set(CMAKE_C_COMPILER gcc)
          set(CMAKE_CXX_COMPILER g++)
          EOF
      - name: Build
        run: |
          mkdir build-mingw
          cd build-mingw
          cmake -G Ninja -DGUI=on -DBUILD_TESTS=on .. \
            -DCMAKE_TOOLCHAIN_FILE="$PWD/../MinGW.cmake" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCROSS_TOOLCHAIN_FLAGS_NATIVE=\"-DCMAKE_TOOLCHAIN_FILE=$PWD/../Native.cmake\"
          ninja -v yass_cli yass_server yass yass_test
      - name: Packaging
        run: |
          cd build-mingw
          # https://www.systutorials.com/docs/linux/man/1-x86_64-w64-mingw32-strip/
          x86_64-w64-mingw32-strip -x -s yass.exe
          cp /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll .
          tar cfz ../yass-mingw64-${{ github.event.release.tag_name }}.tgz yass.exe libwinpthread-1.dll
      - name: Upload dist tarball
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} *.tgz
