name: Build Artifacts (macOS)
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [master]
    paths-ignore: [README.md, BUILDING.md]
  release:
    types: [published]
defaults:
  run:
    shell: bash
env:
  CACHE_EPOCH: 10
jobs:
  cache-toolchain-mac:
    runs-on: macos-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Populate depedencies
        run: brew install ninja cmake
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-toolchain-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: git submodule status --cached third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
            third_party/boringssl/x64-libcrypto.a
            third_party/boringssl/arm64-libcrypto.a
            third_party/boringssl/libssl.a
            third_party/boringssl/x64-libssl.a
            third_party/boringssl/arm64-libssl.a
          key: toolchain-cache-${{ runner.os }}-boringssl-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: "Install dependency: prebuilt clang and clang-tidy binaries"
        run: |
          ./scripts/download-clang-prebuilt-binaries.py
          rm -f third_party/llvm-build/Release+Asserts/*.tgz
      - name: "Install dependency: boringssl (universal)"
        run: |
          ./scripts/build-boringssl.sh

  mac-release:
    needs: cache-toolchain-mac
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, RelWithDebInfo]
    env:
      BUNDLE_NAME: 'yass-${{ github.job }}-${{ matrix.build_type }}-${{ github.event.release.tag_name }}.zip'
      DBG_BUNDLE_NAME: 'yass-${{ github.job }}-${{ matrix.build_type }}-${{ github.event.release.tag_name }}-debuginfo.zip'
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: '0'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-toolchain-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: git submodule status --cached third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
            third_party/boringssl/x64-libcrypto.a
            third_party/boringssl/arm64-libcrypto.a
            third_party/boringssl/libssl.a
            third_party/boringssl/x64-libssl.a
            third_party/boringssl/arm64-libssl.a
          key: toolchain-cache-${{ runner.os }}-boringssl-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: brew install ninja cmake
      - name: Build
        run: ./scripts/build.py
      - run: |
          mv -f yass.zip ${{ env.BUNDLE_NAME }}
          mv -f yass-debuginfo.zip ${{ env.DBG_BUNDLE_NAME }}
      - run: openssl sha256 ${{ env.BUNDLE_NAME }} > sha256sum.txt
      - run: echo "SHA256SUM=$(cut -d' ' -f2 sha256sum.txt)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-${{ matrix.build_type }}-sha256 ${{ env.SHA256SUM }}
          path: sha256sum.txt
      - run: openssl sha256 ${{ env.DBG_BUNDLE_NAME }} > sha256sum-debuginfo.txt
      - run: echo "SHA256SUM_DEBUGINFO=$(cut -d' ' -f2 sha256sum-debuginfo.txt)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-${{ matrix.build_type }}-sha256-debuginfo ${{ env.SHA256SUM_DEBUGINFO }}
          path: sha256sum-debuginfo.txt
      - name: Upload dist tarball (including debuginfo)
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ${{ env.BUNDLE_NAME }} ${{ env.DBG_BUNDLE_NAME }}
  mac-clang-tidy:
    needs: cache-toolchain-mac
    runs-on: macos-latest
    env:
      ENABLE_CLANG_TIDY: '1'
      BUILD_TYPE: '${{ matrix.build_type }}'
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-toolchain-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: git submodule status --cached third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
            third_party/boringssl/x64-libcrypto.a
            third_party/boringssl/arm64-libcrypto.a
            third_party/boringssl/libssl.a
            third_party/boringssl/x64-libssl.a
            third_party/boringssl/arm64-libssl.a
          key: toolchain-cache-${{ runner.os }}-boringssl-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: brew install ninja cmake
      - name: Build
        run: |
          export CLANG_TIDY_EXECUTABLE=$PWD/third_party/llvm-build/Release+Asserts/bin/clang-tidy
          ./scripts/build.py
