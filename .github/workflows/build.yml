name: Build Artifacts
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [master]
    paths-ignore: [README.md]
  release:
    types: [published]
defaults:
  run:
    shell: bash
env:
  CACHE_EPOCH: 4
jobs:
  cache-toolchain-win:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
    env:
      CLANG_ARCH: 'Win'
      VCPKG_DEPS: 'vcpkg-cmake vcpkg-cmake-config'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang and nasm
        uses: actions/cache@v2
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get vcpkg commit
        run: |
          IFS=" " read -r -a array <<< $VCPKG_DEPS
          for VCPKG_DEP in ${VCPKG_DEPS[@]}; do
            echo "$(openssl sha256 /c/vcpkg/ports/$VCPKG_DEP/vcpkg.json) $VCPKG_DEP" >> vcpkg.lock
          done
      - name: Cache vcpkg packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/vcpkg-installed
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\vcpkg.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Restore vcpkg from local tree
        run: |
          if [ -d third_party/vcpkg-installed ]; then
            cp -rv third_party/vcpkg-installed/* /c/vcpkg/
          fi
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/crypto.lib
            third_party/boringssl/debug/crypto.lib
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: "Install dependency: nasm"
        run: |
          mkdir -p third_party
          cd third_party
          curl -O https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-win64.zip
          "/c/Program Files/7-Zip/7z.exe" x nasm-2.15.05-win64.zip
          mv -f nasm-2.15.05 nasm
      - name: "Install dependency: clang-tidy"
        run: |
          mkdir -p third_party/llvm-build/Release+Asserts
          CLANG_REVISION=$(< CLANG_REVISION)
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-tidy-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
      - name: "Install dependency: boringssl"
        run: |
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          call "%vsdevcmd%" -arch=${{ matrix.arch }} -host_arch=amd64
          set CC=
          set CXX=
          set Platform=${{ matrix.arch }}

          set "Path=%CD%/third_party/nasm;%Path%"

          cd third_party\boringssl

          rem You can either use delayed expansion, or simplify your script to
          rem call an external label which isn't bound to the limitations of
          rem the current expansion.
          if "${{ matrix.arch }}" == "arm64" (call :SetNoAsmOptions)

          rem check the existing debug lib
          if not exist debug\crypto.lib (
            mkdir build
            mkdir debug
            cd build

            cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Debug "%CMAKE_EXTRA_OPTIONS%" .. || exit /b 1
            ninja crypto || exit /b 1
            copy /y crypto\crypto.lib ..\debug\crypto.lib
            cd ..
            rmdir build /s /q
          )

          rem check the existing release lib
          if not exist crypto.lib (
            mkdir build
            cd build

            cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release "%CMAKE_EXTRA_OPTIONS%" .. || exit /b 1
            ninja crypto || exit /b 1
            copy /y crypto\crypto.lib ..\crypto.lib
            cd ..
            rmdir build /s /q
          )

          exit
          :SetNoAsmOptions
            set CMAKE_EXTRA_OPTIONS=-DOPENSSL_NO_ASM=on
        shell: cmd
      - name: Copying vcpkg to local tree
        run: |
          mkdir -p /c/vcpkg/installed
          mkdir -p /c/vcpkg/packages
          mkdir -p third_party/vcpkg-installed
          cp -rv /c/vcpkg/installed /c/vcpkg/packages third_party/vcpkg-installed
  cache-toolchain-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
    env:
      CLANG_ARCH: 'Linux_x64'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Populate depedencies
        run: sudo apt-get install -y cmake ninja-build
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: "Install dependency: clang and clang-tidy"
        run: |
          mkdir -p third_party/llvm-build/Release+Asserts
          CLANG_REVISION=$(< CLANG_REVISION)
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-tidy-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
      - name: "Install dependency: boringssl"
        run: |
          cd third_party/boringssl

          if [ ! -f libcrypto.a ]; then
            mkdir build
            cd build
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
            ninja crypto
            cp -fv crypto/libcrypto.a ../libcrypto.a
            cd ..
            rm -rf build
          fi
  cache-toolchain-mac:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Populate depedencies
        run: brew install ninja cmake
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: "Install dependency: clang and clang-tidy"
        run: |
          mkdir -p third_party/llvm-build/Release+Asserts
          MACHINE=$(uname -m)
          if [ "$MACHINE" = "arm64" ]; then
            CLANG_ARCH=Mac_arm64
          else
            CLANG_ARCH=Mac
          fi
          CLANG_REVISION=$(< CLANG_REVISION)
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-tidy-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
      - name: "Install dependency: boringssl"
        run: |
          cd third_party/boringssl

          if [ ! -f libcrypto.a ]; then
            mkdir build
            cd build
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.10 ..
            ninja crypto
            cp -fv crypto/libcrypto.a ../libcrypto.a
            cd ..
            rm -rf build
          fi
  win:
    needs: cache-toolchain-win
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUNDLE_NAME: 'yass-${{ github.event.release.tag_name }}-${{ github.job }}-${{ matrix.arch }}-${{ matrix.build_type }}'
      BUILD_TYPE: '${{ matrix.build_type }}'
      VCPKG_DEPS: 'vcpkg-cmake vcpkg-cmake-config'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang and nasm
        uses: actions/cache@v2
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get vcpkg commit
        run: |
          IFS=" " read -r -a array <<< $VCPKG_DEPS
          for VCPKG_DEP in ${VCPKG_DEPS[@]}; do
            echo "$(openssl sha256 /c/vcpkg/ports/$VCPKG_DEP/vcpkg.json) $VCPKG_DEP" >> vcpkg.lock
          done
      - name: Cache vcpkg packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/vcpkg-installed
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\vcpkg.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Restore vcpkg from local tree
        run: cp -rv third_party/vcpkg-installed/* /c/vcpkg/
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/crypto.lib
            third_party/boringssl/debug/crypto.lib
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Build
        run: |
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          call "%vsdevcmd%" -arch=${{ matrix.arch }} -host_arch=amd64
          set CC=
          set CXX=
          set Platform=${{ matrix.arch }}

          python .\scripts\build.py || exit /b
        shell: cmd
      - run: mv -f ${{ matrix.arch }}-windows-yass.exe.zip ${{ env.BUNDLE_NAME }}.zip
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BUNDLE_NAME }}.zip
          asset_name: ${{ env.BUNDLE_NAME }}.zip
          asset_content_type: application/octet-stream
      - run: openssl sha256 ${{ env.BUNDLE_NAME }}.zip >sha256sum.txt
      - run: echo "SHA256SUM=$(cut -d' ' -f2 sha256sum.txt)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.build_type }}-sha256 ${{ env.SHA256SUM }}
          path: sha256sum.txt
  win-clang-cl:
    needs: cache-toolchain-win
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUNDLE_NAME: 'yass-${{ github.event.release.tag_name }}-${{ github.job }}-${{ matrix.arch }}-${{ matrix.build_type }}'
      BUILD_TYPE: '${{ matrix.build_type }}'
      VCPKG_DEPS: 'vcpkg-cmake vcpkg-cmake-config'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang and nasm
        uses: actions/cache@v2
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get vcpkg commit
        run: |
          IFS=" " read -r -a array <<< $VCPKG_DEPS
          for VCPKG_DEP in ${VCPKG_DEPS[@]}; do
            echo "$(openssl sha256 /c/vcpkg/ports/$VCPKG_DEP/vcpkg.json) $VCPKG_DEP" >> vcpkg.lock
          done
      - name: Cache vcpkg packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/vcpkg-installed
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\vcpkg.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Restore vcpkg from local tree
        run: cp -rv third_party/vcpkg-installed/* /c/vcpkg/
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/crypto.lib
            third_party/boringssl/debug/crypto.lib
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Build
        run: |
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          call "%vsdevcmd%" -arch=${{ matrix.arch }} -host_arch=amd64
          set "CC=%CD%/third_party/llvm-build/Release+Asserts/bin/clang-cl.exe"
          set "CXX=%CD%/third_party/llvm-build/Release+Asserts/bin/clang-cl.exe"
          set Platform=${{ matrix.arch }}

          python .\scripts\build.py || exit /b
        shell: cmd
      - run: mv -f ${{ matrix.arch }}-windows-yass.exe.zip ${{ env.BUNDLE_NAME }}.zip
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BUNDLE_NAME }}.zip
          asset_name: ${{ env.BUNDLE_NAME }}.zip
          asset_content_type: application/octet-stream
      - run: openssl sha256 ${{ env.BUNDLE_NAME }}.zip >sha256sum.txt
      - run: echo "SHA256SUM=$(cut -d' ' -f2 sha256sum.txt)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.build_type }}-sha256 ${{ env.SHA256SUM }}
          path: sha256sum.txt
##win-clang-tidy:
##  needs: cache-toolchain-win
##  runs-on: windows-latest
##  strategy:
##    fail-fast: false
##    matrix:
##      arch: [x64, x86, arm64]
##      build_type: [Debug, RelWithDebInfo]
##  env:
##    ENABLE_CLANG_TIDY: '1'
##    BUILD_TYPE: '${{ matrix.build_type }}'
##    VCPKG_DEPS: 'vcpkg-cmake vcpkg-cmake-config'
##  steps:
##    - uses: actions/checkout@v2
##      with:
##        submodules: 'true'
##    - name: Cache clang and nasm
##      uses: actions/cache@v2
##      with:
##        path: |
##          third_party/nasm
##          third_party/llvm-build/Release+Asserts
##        key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
##    - name: Get vcpkg commit
##      run: |
##        IFS=" " read -r -a array <<< $VCPKG_DEPS
##        for VCPKG_DEP in ${VCPKG_DEPS[@]}; do
##          echo "$(openssl sha256 /c/vcpkg/ports/$VCPKG_DEP/vcpkg.json) $VCPKG_DEP" >> vcpkg.lock
##        done
##    - name: Cache vcpkg packages
##      uses: actions/cache@v2
##      with:
##        path: |
##          third_party/vcpkg-installed
##        key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\vcpkg.lock') }}-v${{ env.CACHE_EPOCH }}
##    - name: Restore vcpkg from local tree
##      run: cp -rv third_party/vcpkg-installed/* /c/vcpkg/
##    - name: Get boringssl commit
##      run: |
##        git submodule status third_party/boringssl >> boringssl.lock
##    - name: Cache boringssl packages
##      uses: actions/cache@v2
##      with:
##        path: |
##          third_party/boringssl/crypto.lib
##          third_party/boringssl/debug/crypto.lib
##        key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
##    - name: Build
##      run: |
##        set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
##        set "VSCMD_START_DIR=%CD%"
##        call "%vsdevcmd%" -arch=${{ matrix.arch }} -host_arch=amd64
##        set CC=
##        set CXX=
##        set Platform=${{ matrix.arch }}

##        set "CLANG_TIDY_EXECUTABLE=%CD%/third_party/llvm-build/Release+Asserts/bin/clang-tidy.exe"
##        python .\scripts\build.py || exit /b
##      shell: cmd
  mac:
    needs: cache-toolchain-mac
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUNDLE_NAME: 'yass-${{ github.event.release.tag_name }}-${{ github.job }}-${{ matrix.arch }}-${{ matrix.build_type }}'
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: brew install ninja cmake jsoncpp wxwidgets
      - name: Build
        run: ./scripts/build.py
      - run: mv -f darwin-yass.app.zip ${{ env.BUNDLE_NAME }}.zip
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BUNDLE_NAME }}.zip
          asset_name: ${{ env.BUNDLE_NAME }}.zip
          asset_content_type: application/octet-stream
      - run: openssl sha256 ${{ env.BUNDLE_NAME }}.zip >sha256sum.txt
      - run: echo "SHA256SUM=$(cut -d' ' -f2 sha256sum.txt)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.build_type }}-sha256 ${{ env.SHA256SUM }}
          path: sha256sum.txt
  mac-clang-tidy:
    needs: cache-toolchain-mac
    runs-on: macos-latest
    env:
      ENABLE_CLANG_TIDY: '1'
      BUILD_TYPE: '${{ matrix.build_type }}'
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
        build_type: [Debug, RelWithDebInfo]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: brew install ninja cmake jsoncpp wxwidgets
      - name: Build
        run: |
          export CLANG_TIDY_EXECUTABLE=$PWD/third_party/llvm-build/Release+Asserts/bin/clang-tidy
          ./scripts/build.py
  linux-gcc-gui:
    needs: cache-toolchain-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUNDLE_NAME: 'yass-${{ github.event.release.tag_name }}-${{ github.job }}-${{ matrix.arch }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: sudo apt-get install -y cmake ninja-build libjsoncpp-dev libwxgtk3.0-gtk3-dev
      - name: Build
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCLI=off -DSERVER=off -DGUI=on ..
          ninja -v
          cd ..
  linux-gcc-server:
    needs: cache-toolchain-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUNDLE_NAME: 'yass-server-${{ github.event.release.tag_name }}-${{ github.job }}-${{ matrix.arch }}'
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: sudo apt-get install -y cmake ninja-build libjsoncpp-dev
      - name: Build
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCLI=on -DSERVER=on -DGUI=off ..
          ninja -v
          cd ..
  linux-clang:
    needs: cache-toolchain-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUNDLE_NAME: 'yass-clang-${{ github.event.release.tag_name }}-${{ github.job }}-${{ matrix.arch }}'
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: sudo apt-get install -y cmake ninja-build libjsoncpp-dev libwxgtk3.0-gtk3-dev
      - name: Build
        run: |
          export CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang
          export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
          mkdir build
          cd build
          cmake -G Ninja -DCLI=on -DSERVER=on -DGUI=on ..
          ninja -v
          cd ..
  linux-clang-tidy:
    needs: cache-toolchain-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: sudo apt-get install -y cmake ninja-build libjsoncpp-dev libwxgtk3.0-gtk3-dev
      - name: Build
        run: |
          export CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang
          export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
          export CLANG_TIDY_EXECUTABLE=$PWD/third_party/llvm-build/Release+Asserts/bin/clang-tidy
          mkdir build
          cd build
          cmake -G Ninja -DENABLE_CLANG_TIDY=yes -DCLANG_TIDY_EXECUTABLE="$CLANG_TIDY_EXECUTABLE" -DCLI=on -DSERVER=on -DGUI=on ..
          ninja -v
          cd ..
