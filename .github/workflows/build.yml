name: Build Artifacts
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [master]
    paths-ignore: [README.md, BUILDING.md]
  release:
    types: [published]
defaults:
  run:
    shell: bash
env:
  CACHE_EPOCH: 8
jobs:
  cache-toolchain-win:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        crt-linkage: [dynamic, static]
    env:
      CLANG_ARCH: 'Win'
      VCPKG_DEPS: 'vcpkg-cmake vcpkg-cmake-config'
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang and nasm
        uses: actions/cache@v2
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get vcpkg commit
        run: |
          IFS=" " read -r -a array <<< $VCPKG_DEPS
          for VCPKG_DEP in ${VCPKG_DEPS[@]}; do
            echo "$(openssl sha256 /c/vcpkg/ports/$VCPKG_DEP/vcpkg.json) $VCPKG_DEP" >> vcpkg.lock
          done
      - name: Cache vcpkg packages
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          key: toolchain-cache-${{ runner.os }}-${{ matrix.crt-linkage }}-build-${{ hashFiles('**\vcpkg.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/vc140.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/vc140.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/vc140.pdb
          key: toolchain-cache-${{ runner.os }}-boringssl-build-${{ matrix.crt-linkage }}-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: "Install dependency: nasm"
        run: |
          mkdir -p third_party
          cd third_party
          curl -O https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-win64.zip
          "/c/Program Files/7-Zip/7z.exe" x nasm-2.15.05-win64.zip
          mv -f nasm-2.15.05 nasm
      - name: "Install dependency: clang-tidy"
        run: |
          mkdir -p third_party/llvm-build/Release+Asserts
          CLANG_REVISION=$(< CLANG_REVISION)
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-tidy-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
      - name: "Install dependency: boringssl (x86 slice)"
        run: |
          set VCToolsVersion=14.0
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          call "%vsdevcmd%" -arch=x86 -host_arch=amd64
          set CC=
          set CXX=
          set MSVC_CRT_LINKAGE=${{ matrix.crt-linkage }}
          set COMPILER_TARGET=i686-pc-windows-msvc
          set Platform=x86

          set "Path=%CD%/third_party/nasm;%Path%"

          REM When you pass -DCMAKE_C_COMPILER= with an absolute path you need to use forward slashes.  That is setting a value directly into CMakeCache.txt so no automatic slash conversion is done.
          set "CMAKE_CC=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"
          set "CMAKE_CXX=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"

          cd third_party\boringssl
          mkdir "%Platform%-%MSVC_CRT_LINKAGE%"
          mkdir "%Platform%-%MSVC_CRT_LINKAGE%\debug"

          rem check the existing debug lib
          if not exist "%Platform%-%MSVC_CRT_LINKAGE%\debug\crypto.lib" (
            rmdir build /s /q
            mkdir build
            cd build
            set "CC=%CMAKE_CC%"
            set "CXX=%CMAKE_CXX%"
            cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MSVC_CRT_LINKAGE=%MSVC_CRT_LINKAGE% -DCMAKE_C_COMPILER_TARGET=%COMPILER_TARGET% -DCMAKE_CXX_COMPILER_TARGET=%COMPILER_TARGET% "-DCMAKE_ASM_FLAGS=--target=%COMPILER_TARGET%" %CMAKE_EXTRA_OPTIONS% .. || exit /b 1
            set CC=
            set CXX=
            ninja crypto || exit /b 1
            copy /y crypto\crypto.lib "..\%Platform%-%MSVC_CRT_LINKAGE%\debug\crypto.lib"
            copy /y crypto\crypto.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\debug\crypto.pdb"
            copy /y crypto\fipsmodule\CMakeFiles\fipsmodule.dir\vc140.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\debug\vc140.pdb"
            cd ..
          )

          rem check the existing release lib
          if not exist "%Platform%-%MSVC_CRT_LINKAGE%\crypto.lib" (
            rmdir build /s /q
            mkdir build
            cd build
            set "CC=%CMAKE_CC%"
            set "CXX=%CMAKE_CXX%"
            cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_MSVC_CRT_LINKAGE=%MSVC_CRT_LINKAGE% -DCMAKE_C_COMPILER_TARGET=%COMPILER_TARGET% -DCMAKE_CXX_COMPILER_TARGET=%COMPILER_TARGET% "-DCMAKE_ASM_FLAGS=--target=%COMPILER_TARGET%" %CMAKE_EXTRA_OPTIONS% .. || exit /b 1
            set CC=
            set CXX=
            ninja crypto || exit /b 1
            copy /y crypto\crypto.lib "..\%Platform%-%MSVC_CRT_LINKAGE%\crypto.lib"
            copy /y crypto\crypto.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\crypto.pdb"
            copy /y crypto\fipsmodule\CMakeFiles\fipsmodule.dir\vc140.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\vc140.pdb"
            cd ..
          )

          cd ..\..

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
        shell: cmd
      - name: "Install dependency: boringssl (x64 slice)"
        run: |
          set VCToolsVersion=14.0
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          call "%vsdevcmd%" -arch=amd64 -host_arch=amd64
          set CC=
          set CXX=
          set MSVC_CRT_LINKAGE=${{ matrix.crt-linkage }}
          set COMPILER_TARGET=x86_64-pc-windows-msvc
          set Platform=x64

          set "Path=%CD%/third_party/nasm;%Path%"

          REM When you pass -DCMAKE_C_COMPILER= with an absolute path you need to use forward slashes.  That is setting a value directly into CMakeCache.txt so no automatic slash conversion is done.
          set "CMAKE_CC=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"
          set "CMAKE_CXX=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"

          cd third_party\boringssl
          mkdir "%Platform%-%MSVC_CRT_LINKAGE%"
          mkdir "%Platform%-%MSVC_CRT_LINKAGE%\debug"

          rem check the existing debug lib
          if not exist "%Platform%-%MSVC_CRT_LINKAGE%\debug\crypto.lib" (
            rmdir build /s /q
            mkdir build
            cd build
            set "CC=%CMAKE_CC%"
            set "CXX=%CMAKE_CXX%"
            cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MSVC_CRT_LINKAGE=%MSVC_CRT_LINKAGE% -DCMAKE_C_COMPILER_TARGET=%COMPILER_TARGET% -DCMAKE_CXX_COMPILER_TARGET=%COMPILER_TARGET% "-DCMAKE_ASM_FLAGS=--target=%COMPILER_TARGET%" %CMAKE_EXTRA_OPTIONS% .. || exit /b 1
            set CC=
            set CXX=
            ninja crypto || exit /b 1
            copy /y crypto\crypto.lib "..\%Platform%-%MSVC_CRT_LINKAGE%\debug\crypto.lib"
            copy /y crypto\crypto.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\debug\crypto.pdb"
            copy /y crypto\fipsmodule\CMakeFiles\fipsmodule.dir\vc140.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\debug\vc140.pdb"
            cd ..
          )

          rem check the existing release lib
          if not exist "%Platform%-%MSVC_CRT_LINKAGE%\crypto.lib" (
            rmdir build /s /q
            mkdir build
            cd build
            set "CC=%CMAKE_CC%"
            set "CXX=%CMAKE_CXX%"
            cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_MSVC_CRT_LINKAGE=%MSVC_CRT_LINKAGE% -DCMAKE_C_COMPILER_TARGET=%COMPILER_TARGET% -DCMAKE_CXX_COMPILER_TARGET=%COMPILER_TARGET% "-DCMAKE_ASM_FLAGS=--target=%COMPILER_TARGET%" %CMAKE_EXTRA_OPTIONS% .. || exit /b 1
            set CC=
            set CXX=
            ninja crypto || exit /b 1
            copy /y crypto\crypto.lib "..\%Platform%-%MSVC_CRT_LINKAGE%\crypto.lib"
            copy /y crypto\crypto.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\crypto.pdb"
            copy /y crypto\fipsmodule\CMakeFiles\fipsmodule.dir\vc140.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\vc140.pdb"
            cd ..
          )

          cd ..\..

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
        shell: cmd
      - name: "Install dependency: boringssl (arm64 slice)"
        run: |
          set VCToolsVersion=14.0
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          call "%vsdevcmd%" -arch=arm64 -host_arch=amd64
          set CC=
          set CXX=
          set MSVC_CRT_LINKAGE=${{ matrix.crt-linkage }}
          set COMPILER_TARGET=arm64-pc-windows-msvc
          set Platform=arm64

          set "Path=%CD%/third_party/nasm;%Path%"

          REM When you pass -DCMAKE_C_COMPILER= with an absolute path you need to use forward slashes.  That is setting a value directly into CMakeCache.txt so no automatic slash conversion is done.
          set "CMAKE_CC=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"
          set "CMAKE_CXX=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"

          cd third_party\boringssl
          mkdir "%Platform%-%MSVC_CRT_LINKAGE%"
          mkdir "%Platform%-%MSVC_CRT_LINKAGE%\debug"

          rem check the existing debug lib
          if not exist "%Platform%-%MSVC_CRT_LINKAGE%\debug\crypto.lib" (
            rmdir build /s /q
            mkdir build
            cd build
            set "CC=%CMAKE_CC%"
            set "CXX=%CMAKE_CXX%"
            cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MSVC_CRT_LINKAGE=%MSVC_CRT_LINKAGE% -DCMAKE_C_COMPILER_TARGET=%COMPILER_TARGET% -DCMAKE_CXX_COMPILER_TARGET=%COMPILER_TARGET% "-DCMAKE_ASM_FLAGS=--target=%COMPILER_TARGET%" %CMAKE_EXTRA_OPTIONS% .. || exit /b 1
            set CC=
            set CXX=
            ninja crypto || exit /b 1
            copy /y crypto\crypto.lib "..\%Platform%-%MSVC_CRT_LINKAGE%\debug\crypto.lib"
            copy /y crypto\crypto.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\debug\crypto.pdb"
            copy /y crypto\fipsmodule\CMakeFiles\fipsmodule.dir\vc140.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\debug\vc140.pdb"
            cd ..
          )

          rem check the existing release lib
          if not exist "%Platform%-%MSVC_CRT_LINKAGE%\crypto.lib" (
            rmdir build /s /q
            mkdir build
            cd build
            set "CC=%CMAKE_CC%"
            set "CXX=%CMAKE_CXX%"
            cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_MSVC_CRT_LINKAGE=%MSVC_CRT_LINKAGE% -DCMAKE_C_COMPILER_TARGET=%COMPILER_TARGET% -DCMAKE_CXX_COMPILER_TARGET=%COMPILER_TARGET% "-DCMAKE_ASM_FLAGS=--target=%COMPILER_TARGET%" %CMAKE_EXTRA_OPTIONS% .. || exit /b 1
            set CC=
            set CXX=
            ninja crypto || exit /b 1
            copy /y crypto\crypto.lib "..\%Platform%-%MSVC_CRT_LINKAGE%\crypto.lib"
            copy /y crypto\crypto.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\crypto.pdb"
            copy /y crypto\fipsmodule\CMakeFiles\fipsmodule.dir\vc140.pdb "..\%Platform%-%MSVC_CRT_LINKAGE%\vc140.pdb"
            cd ..
          )

          cd ..\..

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
        shell: cmd
  cache-toolchain-linux:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
    env:
      CLANG_ARCH: 'Linux_x64'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Populate depedencies
        run: sudo apt-get install -y cmake ninja-build
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: "Install dependency: clang and clang-tidy"
        run: |
          mkdir -p third_party/llvm-build/Release+Asserts
          CLANG_REVISION=$(< CLANG_REVISION)
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-tidy-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
      - name: "Install dependency: boringssl"
        run: |
          cd third_party/boringssl

          if [ ! -f libcrypto.a ]; then
            mkdir build
            cd build
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
            ninja crypto
            cp -fv crypto/libcrypto.a ../libcrypto.a
            cd ..
            rm -rf build
          fi
  cache-toolchain-mac:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [universal]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Populate depedencies
        run: brew install ninja cmake
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
            third_party/boringssl/x64-libcrypto.a
            third_party/boringssl/arm64-libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: "Install dependency: clang and clang-tidy"
        run: |
          mkdir -p third_party/llvm-build/Release+Asserts
          MACHINE=$(uname -m)
          if [ "$MACHINE" = "arm64" ]; then
            CLANG_ARCH=Mac_arm64
          else
            CLANG_ARCH=Mac
          fi
          CLANG_REVISION=$(< CLANG_REVISION)
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
          curl https://commondatastorage.googleapis.com/chromium-browser-clang/$CLANG_ARCH/clang-tidy-$CLANG_REVISION.tgz | tar xzf - -C third_party/llvm-build/Release+Asserts
      - name: "Install dependency: boringssl (x64 slice)"
        run: |
          cd third_party/boringssl

          if [ ! -f x64-libcrypto.a ]; then
            mkdir build
            cd build
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.10 \
              -DCMAKE_OSX_ARCHITECTURES="x86_64" ..
            ninja crypto
            cp -fv crypto/libcrypto.a ../x64-libcrypto.a
            cd ..
            rm -rf build
          fi
      - name: "Install dependency: boringssl (arm64 slice)"
        run: |
          cd third_party/boringssl

          if [ ! -f arm64-libcrypto.a ]; then
            mkdir build
            cd build
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.10 \
              -DCMAKE_OSX_ARCHITECTURES="arm64" ..
            ninja crypto
            cp -fv crypto/libcrypto.a ../arm64-libcrypto.a
            cd ..
            rm -rf build
          fi
      - name: "Install dependency: boringssl (universal)"
        run: |
          cd third_party/boringssl
          if [ ! -f libcrypto.a ]; then
            lipo -create arm64-libcrypto.a x64-libcrypto.a -output libcrypto.a
            lipo -info libcrypto.a
          fi

  win:
    needs: cache-toolchain-win
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
        crt-linkage: [dynamic, static]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUNDLE_NAME: 'yass-${{ github.event.release.tag_name }}-${{ github.job }}-${{ matrix.arch }}-${{ matrix.crt-linkage }}-${{ matrix.build_type }}'
      BUILD_TYPE: '${{ matrix.build_type }}'
      MSVC_CRT_LINKAGE: '{{ matrix.crt-linkage }}'
      VCPKG_DEPS: 'vcpkg-cmake vcpkg-cmake-config'
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang and nasm
        uses: actions/cache@v2
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get vcpkg commit
        run: |
          IFS=" " read -r -a array <<< $VCPKG_DEPS
          for VCPKG_DEP in ${VCPKG_DEPS[@]}; do
            echo "$(openssl sha256 /c/vcpkg/ports/$VCPKG_DEP/vcpkg.json) $VCPKG_DEP" >> vcpkg.lock
          done
      - name: Cache vcpkg packages
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          key: toolchain-cache-${{ runner.os }}-${{ matrix.crt-linkage }}-build-${{ hashFiles('**\vcpkg.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/vc140.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/vc140.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/vc140.pdb
          key: toolchain-cache-${{ runner.os }}-boringssl-build-${{ matrix.crt-linkage }}-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Build
        run: |
          set VCToolsVersion=14.0
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          call "%vsdevcmd%" -arch=${{ matrix.arch }} -host_arch=amd64
          set CC=
          set CXX=
          set Platform=${{ matrix.arch }}
          set MSVC_CRT_LINKAGE=${{ matrix.crt-linkage }}

          python .\scripts\build.py || exit /b

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
        shell: cmd
      - run: |
          mv -f ${{ matrix.arch }}-${{ matrix.crt-linkage }}-windows-yass.exe.zip ${{ env.BUNDLE_NAME }}.zip
          mv -f ${{ matrix.arch }}-${{ matrix.crt-linkage }}-windows-yass.exe-standalone.zip ${{ env.BUNDLE_NAME }}-standalone.zip
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BUNDLE_NAME }}.zip
          asset_name: ${{ env.BUNDLE_NAME }}.zip
          asset_content_type: application/octet-stream
      - run: openssl sha256 ${{ env.BUNDLE_NAME }}.zip > sha256sum.txt
      - run: echo "SHA256SUM=$(cut -d' ' -f2 sha256sum.txt)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.crt-linkage }}-${{ matrix.build_type }}-sha256 ${{ env.SHA256SUM }}
          path: sha256sum.txt
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BUNDLE_NAME }}-standalone.zip
          asset_name: ${{ env.BUNDLE_NAME }}-standalone.zip
          asset_content_type: application/octet-stream
      - run: openssl sha256 ${{ env.BUNDLE_NAME }}-standalone.zip > sha256sum-standalone.txt
      - run: echo "SHA256SUM_STANDALONE=$(cut -d' ' -f2 sha256sum-standalone.txt)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.crt-linkage }}-${{ matrix.build_type }}-sha256-standalone ${{ env.SHA256SUM_STANDALONE }}
          path: sha256sum-standalone.txt
  win-clang-cl:
    needs: cache-toolchain-win
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
        build_type: [Debug, RelWithDebInfo]
        crt-linkage: [dynamic]
    env:
      BUNDLE_NAME: 'yass-${{ github.event.release.tag_name }}-${{ github.job }}-${{ matrix.arch }}-${{ matrix.crt-linkage }}-${{ matrix.build_type }}'
      BUILD_TYPE: '${{ matrix.build_type }}'
      MSVC_CRT_LINKAGE: '{{ matrix.crt-linkage }}'
      VCPKG_DEPS: 'vcpkg-cmake vcpkg-cmake-config'
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang and nasm
        uses: actions/cache@v2
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get vcpkg commit
        run: |
          IFS=" " read -r -a array <<< $VCPKG_DEPS
          for VCPKG_DEP in ${VCPKG_DEPS[@]}; do
            echo "$(openssl sha256 /c/vcpkg/ports/$VCPKG_DEP/vcpkg.json) $VCPKG_DEP" >> vcpkg.lock
          done
      - name: Cache vcpkg packages
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          key: toolchain-cache-${{ runner.os }}-${{ matrix.crt-linkage }}-build-${{ hashFiles('**\vcpkg.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/vc140.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/vc140.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/vc140.pdb
          key: toolchain-cache-${{ runner.os }}-boringssl-build-${{ matrix.crt-linkage }}-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Build
        run: |
          set VCToolsVersion=14.0
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          call "%vsdevcmd%" -arch=${{ matrix.arch }} -host_arch=amd64
          set "CC=%CD%/third_party/llvm-build/Release+Asserts/bin/clang-cl.exe"
          set "CXX=%CD%/third_party/llvm-build/Release+Asserts/bin/clang-cl.exe"
          set Platform=${{ matrix.arch }}
          set MSVC_CRT_LINKAGE=${{ matrix.crt-linkage }}

          python .\scripts\build.py || exit /b

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
        shell: cmd
      - run: |
          mv -f ${{ matrix.arch }}-${{ matrix.crt-linkage }}-windows-yass.exe.zip ${{ env.BUNDLE_NAME }}.zip
          mv -f ${{ matrix.arch }}-${{ matrix.crt-linkage }}-windows-yass.exe-standalone.zip ${{ env.BUNDLE_NAME }}-standalone.zip
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BUNDLE_NAME }}.zip
          asset_name: ${{ env.BUNDLE_NAME }}.zip
          asset_content_type: application/octet-stream
      - run: openssl sha256 ${{ env.BUNDLE_NAME }}.zip > sha256sum.txt
      - run: echo "SHA256SUM=$(cut -d' ' -f2 sha256sum.txt)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.crt-linkage }}-${{ matrix.build_type }}-sha256 ${{ env.SHA256SUM }}
          path: sha256sum.txt
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BUNDLE_NAME }}-standalone.zip
          asset_name: ${{ env.BUNDLE_NAME }}-standalone.zip
          asset_content_type: application/octet-stream
      - run: openssl sha256 ${{ env.BUNDLE_NAME }}-standalone.zip > sha256sum-standalone.txt
      - run: echo "SHA256SUM_STANDALONE=$(cut -d' ' -f2 sha256sum-standalone.txt)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.crt-linkage }}-${{ matrix.build_type }}-sha256-standalone ${{ env.SHA256SUM_STANDALONE }}
          path: sha256sum-standalone.txt
  win-clang-tidy:
    needs: cache-toolchain-win
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        build_type: [Release]
        crt-linkage: [dynamic]
    env:
      ENABLE_CLANG_TIDY: '1'
      BUILD_TYPE: '${{ matrix.build_type }}'
      MSVC_CRT_LINKAGE: '{{ matrix.crt-linkage }}'
      VCPKG_DEPS: 'vcpkg-cmake vcpkg-cmake-config'
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang and nasm
        uses: actions/cache@v2
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get vcpkg commit
        run: |
          IFS=" " read -r -a array <<< $VCPKG_DEPS
          for VCPKG_DEP in ${VCPKG_DEPS[@]}; do
            echo "$(openssl sha256 /c/vcpkg/ports/$VCPKG_DEP/vcpkg.json) $VCPKG_DEP" >> vcpkg.lock
          done
      - name: Cache vcpkg packages
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          key: toolchain-cache-${{ runner.os }}-${{ matrix.crt-linkage }}-build-${{ hashFiles('**\vcpkg.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/x86-${{ matrix.crt-linkage }}/debug/vc140.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/x64-${{ matrix.crt-linkage }}/debug/vc140.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/crypto.lib
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/crypto.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/vc140.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/crypto.lib
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/crypto.pdb
            third_party/boringssl/arm64-${{ matrix.crt-linkage }}/debug/vc140.pdb
          key: toolchain-cache-${{ runner.os }}-boringssl-build-${{ matrix.crt-linkage }}-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Build
        run: |
          set VCToolsVersion=14.0
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          call "%vsdevcmd%" -arch=${{ matrix.arch }} -host_arch=amd64
          set CC=
          set CXX=
          set Platform=${{ matrix.arch }}
          set MSVC_CRT_LINKAGE=${{ matrix.crt-linkage }}

          set "CLANG_TIDY_EXECUTABLE=%CD%/third_party/llvm-build/Release+Asserts/bin/clang-tidy.exe"
          python .\scripts\build.py || exit /b

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
        shell: cmd
  mac:
    needs: cache-toolchain-mac
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [universal]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUNDLE_NAME: 'yass-${{ github.event.release.tag_name }}-${{ github.job }}-${{ matrix.arch }}-${{ matrix.build_type }}'
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
            third_party/boringssl/x64-libcrypto.a
            third_party/boringssl/arm64-libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: brew install ninja cmake
      - name: Populate depedencies (PyObjc)
        run: pip install pyobjc-core pyobjc
      - name: Build
        run: ./scripts/build.py
      - run: mv -f darwin-yass.app.zip ${{ env.BUNDLE_NAME }}.zip
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BUNDLE_NAME }}.zip
          asset_name: ${{ env.BUNDLE_NAME }}.zip
          asset_content_type: application/octet-stream
      - run: openssl sha256 ${{ env.BUNDLE_NAME }}.zip >sha256sum.txt
      - run: echo "SHA256SUM=$(cut -d' ' -f2 sha256sum.txt)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.build_type }}-sha256 ${{ env.SHA256SUM }}
          path: sha256sum.txt
  mac-clang-tidy:
    needs: cache-toolchain-mac
    runs-on: macos-latest
    env:
      ENABLE_CLANG_TIDY: '1'
      BUILD_TYPE: '${{ matrix.build_type }}'
    strategy:
      fail-fast: false
      matrix:
        arch: [universal]
        build_type: [Release]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
            third_party/boringssl/x64-libcrypto.a
            third_party/boringssl/arm64-libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: brew install ninja cmake
      - name: Populate depedencies (PyObjc)
        run: pip install pyobjc-core pyobjc
      - name: Build
        run: |
          export CLANG_TIDY_EXECUTABLE=$PWD/third_party/llvm-build/Release+Asserts/bin/clang-tidy
          ./scripts/build.py
  linux-release:
    needs: cache-toolchain-linux
    runs-on: ${{ matrix.env }}
    strategy:
      fail-fast: false
      matrix:
        env: [ubuntu-18.04, ubuntu-20.04]
        arch: [x64]
    env:
      BUNDLE_NAME: 'yass_${{ github.event.release.tag_name }}-${{ matrix.env }}-${{ matrix.arch }}'
      DBG_BUNDLE_NAME: 'yass-dbg_${{ github.event.release.tag_name }}-${{ matrix.env }}-${{ matrix.arch }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies (build)
        run: sudo apt-get install -y build-essential fakeroot devscripts debhelper
      - name: Populate depedencies
        run: sudo apt-get install -y cmake golang libunwind-dev libgtk-3-dev libgtkmm-3.0-dev
      - name: Build Deb Packages
        run: |
          ./scripts/build-deb.sh
      - run: mv -f ../yass_1.0.0-1_amd64.deb ${{ env.BUNDLE_NAME }}.deb
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BUNDLE_NAME }}.deb
          asset_name: ${{ env.BUNDLE_NAME }}.deb
          asset_content_type: application/octet-stream
      - run: mv -f ../yass-dbg_1.0.0-1_amd64.deb ${{ env.DBG_BUNDLE_NAME }}.deb
      - uses: actions/upload-release-asset@v1
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.DBG_BUNDLE_NAME }}.deb
          asset_name: ${{ env.DBG_BUNDLE_NAME }}.deb
          asset_content_type: application/octet-stream
  linux-gcc:
    needs: cache-toolchain-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        build_type: [Debug, RelWithDebInfo]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: sudo apt-get install -y cmake ninja-build libgtk-3-dev libgtkmm-3.0-dev
      - name: Build
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCLI=on -DSERVER=on -DGUI=on ..
          ninja -v yass_cli yass_server yass
          cd ..
  linux-clang:
    needs: cache-toolchain-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: sudo apt-get install -y cmake ninja-build libgtk-3-dev libgtkmm-3.0-dev
      - name: Build
        run: |
          export CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang
          export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
          mkdir build
          cd build
          cmake -G Ninja -DCLI=on -DSERVER=on -DGUI=on ..
          ninja -v yass_cli yass_server yass
          cd ..
  linux-clang-tidy:
    needs: cache-toolchain-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        build_type: [Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Get boringssl commit
        run: |
          git submodule status third_party/boringssl >> boringssl.lock
      - name: Cache boringssl packages
        uses: actions/cache@v2
        with:
          path: |
            third_party/boringssl/libcrypto.a
          key: toolchain-cache-${{ runner.os }}-${{ matrix.arch }}-build-${{ hashFiles('**\boringssl.lock') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: sudo apt-get install -y cmake ninja-build libgtk-3-dev libgtkmm-3.0-dev
      - name: Build
        run: |
          export CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang
          export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
          export CLANG_TIDY_EXECUTABLE=$PWD/third_party/llvm-build/Release+Asserts/bin/clang-tidy
          mkdir build
          cd build
          cmake -G Ninja -DENABLE_CLANG_TIDY=yes -DCLANG_TIDY_EXECUTABLE="$CLANG_TIDY_EXECUTABLE" -DCLI=on -DSERVER=on -DGUI=on ..
          ninja -v yass_cli yass_server yass
          cd ..
