name: Build Artifacts (macOS)
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
  pull_request:
    branches: [master, develop]
    paths-ignore:
    - '**/*.md'
    - '.circleci/**'
    - '.cirrus.yml'
  push:
    branches: [master, develop]
    paths-ignore:
    - '**/*.md'
    - '.circleci/**'
    - '.cirrus.yml'
  release:
    types: [published]
env:
  CACHE_EPOCH: 121-2
  GOPROXY: direct
jobs:
  mac-release:
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v4
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang
        id: clang-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Cache depot_tools
        id: depot-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/depot_tools
          key: ${{ runner.os }}-depot_tools
      - name: Cache crashpad build stage
        id: crashpad-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/crashpad
          key: ${{ runner.os }}-mac-perarch-crashpad-universal-v${{ env.CACHE_EPOCH }}-v1
      - name: Cache golang (tools only)
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-tools-${{ hashFiles('tools/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: "Install dependency: prebuilt clang and clang-tidy binaries"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          ./scripts/download-clang-prebuilt-binaries.py
          rm -f third_party/llvm-build/Release+Asserts/*.tgz
      - name: Populate depedencies
        run: |
          # brew update
          # brew install ninja cmake p7zip
          brew install ninja
          # pin to old python for distutils (python 3.12 removed it)
          brew install python@3.11
          brew unlink python@3.11
          brew unlink python@3.12
          brew link --force --overwrite python@3.11
          ln -sf $(brew --prefix)/opt/python@3.11/libexec/bin/python /usr/local/bin/python
          ln -sf $(brew --prefix)/opt/python@3.11/libexec/bin/python /usr/local/bin/python3
      - name: Set clang environment
        run: |
          echo "CC=${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/clang" >> $GITHUB_ENV
          echo "CXX=${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/clang++" >> $GITHUB_ENV
      - name: Download and Build Crashpad (include depot_tools)
        if: ${{ steps.depot-cache.outputs.cache-hit != 'true' || steps.crashpad-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          WITH_CPU=x64 ./scripts/build-crashpad.sh
          WITH_CPU=arm64 ./scripts/build-crashpad.sh
      - name: Build
        run: |
          ./tools/build -build-benchmark -build-test -use-icu
      - name: Run tests
        run: |
          ./build-darwin-universal/yass_test
          ./build-darwin-universal/yass_benchmark
      - name: Upload dist tarball (including debuginfo)
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} *.dmg *.zip
