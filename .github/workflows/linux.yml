name: Build Artifacts (Linux)
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
  pull_request:
  push:
    branches: [master]
    paths-ignore: [README.md, BUILDING.md]
  release:
    types: [published]
env:
  CACHE_EPOCH: 0
  GOPROXY: direct
jobs:
  docker_publish:
    strategy:
      fail-fast: false
      matrix:
        container:
        - 'centos7'
        - 'centos8'
        - 'fedora35'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker Image
        run: |
          cd docker
          docker build --cache-from ghcr.io/chilledheart/${{ matrix.container }} \
            --build-arg CACHE_EPOCH=${{ env.CACHE_EPOCH }} \
            -f ${{ matrix.container }}.Dockerfile \
            -t ghcr.io/chilledheart/${{ matrix.container }} \
            .
      - name: Push Docker Image
        run: |
          docker push --all-tags ghcr.io/chilledheart/${{ matrix.container }}
  centos-release:
    strategy:
      fail-fast: false
      matrix:
        container:
        - 'centos7'
        - 'centos8'
        - 'fedora35'
    runs-on: ubuntu-18.04
    needs: docker_publish
    container: 'ghcr.io/chilledheart/${{ matrix.container }}'
    env:
      DISTRO: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v2
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang
        id: clang-cache
        uses: actions/cache@v2
        if: ${{ env.DISTRO != 'centos7' }}
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-
      - name: Cache clang (el7)
        id: clang-cache-el7
        uses: actions/cache@v2
        if: ${{ env.DISTRO == 'centos7' }}
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: ${{ runner.os }}-toolchain-el7-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-el7-${{ hashFiles('CLANG_REVISION') }}-
            ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-
      - name: Cache golang
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-docker-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-docker-
      - name: "Install dependency: prebuilt clang and clang-tidy binaries"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' && env.DISTRO != 'centos7' }}
        run: |
          ./scripts/download-clang-prebuilt-binaries.py
          rm -f third_party/llvm-build/Release+Asserts/*.tgz
      - name: "Install dependency: prebuilt clang and clang-tidy binaries (el7 patch)"
        if: ${{ steps.clang-cache-el7.outputs.cache-hit != 'true' && env.DISTRO == 'centos7' }}
        run: |
          ./scripts/download-clang-prebuilt-binaries.py
          rm -f third_party/llvm-build/Release+Asserts/*.tgz
          ./scripts/libstdc++-el7.sh
      - name: Build RPM packages
        run: |
          export CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang
          export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
          ./scripts/build-rpm.sh
      - name: Upload dist tarball (including debuginfo)
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} yass*.rpm
  linux-binary-release:
    strategy:
      fail-fast: false
      matrix:
        arch:
        - 'amd64'
        - 'arm'
        - 'arm64'
        - 'armel'
        - 'i386'
        - 'mips'
        - 'mips64el'
    runs-on: ubuntu-18.04
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v2
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang
        id: clang-cache
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-
      - name: Cache golang
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-docker-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-docker-
      - name: Cache sysroot
        id: sysroot-cache
        uses: actions/cache@v2
        with:
          path: |
            debian_sid_${{ matrix.arch }}-sysroot
          key: ${{ runner.os }}-sysroot-${{ matrix.arch }}-${{ hashFiles('scripts/sysroots.json') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-sysroot-${{ matrix.arch }}-${{ hashFiles('scripts/sysroots.json') }}-
      - name: "Install dependency: prebuilt clang and clang-tidy binaries"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          ./scripts/download-clang-prebuilt-binaries.py
          rm -f third_party/llvm-build/Release+Asserts/*.tgz
      - name: "Install dependency: sysroot"
        if: ${{ steps.sysroot-cache.outputs.cache-hit != 'true' }}
        run: |
          ./scripts/install-sysroot.py --arch ${{ env.ARCH }}
      - name: Build TGZ packages
        run: |
          export CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang
          export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
          ./scripts/build.py --arch ${{ matrix.arch }} --system Linux --sysroot $PWD/debian_sid_${{ matrix.arch }}-sysroot
      - name: Upload dist tarball (including debuginfo)
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} yass*.zip
