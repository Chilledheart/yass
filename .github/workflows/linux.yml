name: Build Artifacts (Linux)
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
  pull_request:
  push:
    branches: [master]
    paths-ignore: [README.md, BUILDING.md]
  release:
    types: [published]
defaults:
  run:
    shell: bash
env:
  CACHE_EPOCH: 11
jobs:
  docker_publish:
    strategy:
      fail-fast: false
      matrix:
        container:
        - 'centos8'
        - 'ubuntu16.04'
        - 'ubuntu18.04'
        - 'ubuntu20.04'
        - 'debian9'
        - 'debian10'
        - 'debian11'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker Image
        run: |
          docker build --cache-from ghcr.io/chilledheart/${{ matrix.container }} \
            -f docker/${{ matrix.container }}.Dockerfile \
            -t ghcr.io/chilledheart/${{ matrix.container }} \
            docker
      - name: Push Docker Image
        run: |
          docker push ghcr.io/chilledheart/${{ matrix.container }}
  cache-toolchain-linux:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-toolchain-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: "Install dependency: prebuilt clang and clang-tidy binaries"
        run: |
          ./scripts/download-clang-prebuilt-binaries.py
          rm -f third_party/llvm-build/Release+Asserts/*.tgz

  ubuntu-latest:
    needs: cache-toolchain-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
      COMPILER: '${{ matrix.compiler }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-toolchain-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: sudo apt-get update -qq && sudo apt-get install -y cmake ninja-build libgtk-3-dev libgtkmm-3.0-dev
      - name: Build
        run: |
          if [ "$COMPILER" = "clang" ]; then
            export CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang
            export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
          else
            export CC=gcc
            export CXX=g++
          fi
          mkdir build
          cd build
          cmake -G Ninja -DCLI=on -DSERVER=on -DGUI=on ..
          ninja -v yass_cli yass_server yass
          cd ..
  ubuntu-latest-clang-tidy:
    needs: cache-toolchain-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: toolchain-cache-${{ runner.os }}-toolchain-build-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Populate depedencies
        run: sudo apt-get update -qq && sudo apt-get install -y cmake ninja-build libgtk-3-dev libgtkmm-3.0-dev
      - name: Build
        run: |
          export CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang
          export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
          export CLANG_TIDY_EXECUTABLE=$PWD/third_party/llvm-build/Release+Asserts/bin/clang-tidy
          mkdir build
          cd build
          cmake -G Ninja -DENABLE_CLANG_TIDY=yes -DCLANG_TIDY_EXECUTABLE="$CLANG_TIDY_EXECUTABLE" -DCLI=on -DSERVER=on -DGUI=on ..
          ninja -v yass_cli yass_server yass
          cd ..
  centos-release:
    strategy:
      fail-fast: false
      matrix:
        container:
        - 'centos8'
    env:
      BUNDLE_NAME: 'yass-${{ matrix.container }}-${{ github.event.release.tag_name }}.el8.x86_64.rpm'
      DBG_BUNDLE_NAME: 'yass-${{ matrix.container }}-${{ github.event.release.tag_name }}-debuginfo.el8.x86_64.rpm'
      SERVER_BUNDLE_NAME: 'yass-server-${{ matrix.container }}-${{ github.event.release.tag_name }}.el8.x86_64.rpm'
      DBG_SERVER_BUNDLE_NAME: 'yass-server-${{ matrix.container }}-${{ github.event.release.tag_name }}-debuginfo.el8.x86_64.rpm'
      CLIENT_BUNDLE_NAME: 'yass-client-${{ matrix.container }}-${{ github.event.release.tag_name }}.el8.x86_64.rpm'
      DBG_CLIENT_BUNDLE_NAME: 'yass-client-${{ matrix.container }}-${{ github.event.release.tag_name }}-debuginfo.el8.x86_64.rpm'
    runs-on: ubuntu-latest
    needs: docker_publish
    container: 'ghcr.io/chilledheart/${{ matrix.container }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: '0'
      - name: Build RPM packages
        run: |
          ./scripts/build-rpm.sh
      - run: mv -f $HOME/rpmbuild/RPMS/x86_64/yass-1.0.0-1.el8.x86_64.rpm ${{ env.BUNDLE_NAME }}
      - run: mv -f $HOME/rpmbuild/RPMS/x86_64/yass-debuginfo-1.0.0-1.el8.x86_64.rpm ${{ env.DBG_BUNDLE_NAME }}
      - run: mv -f $HOME/rpmbuild/RPMS/x86_64/yass-server-1.0.0-1.el8.x86_64.rpm ${{ env.SERVER_BUNDLE_NAME }}
      - run: mv -f $HOME/rpmbuild/RPMS/x86_64/yass-server-debuginfo-1.0.0-1.el8.x86_64.rpm ${{ env.DBG_SERVER_BUNDLE_NAME }}
      - run: mv -f $HOME/rpmbuild/RPMS/x86_64/yass-client-1.0.0-1.el8.x86_64.rpm ${{ env.CLIENT_BUNDLE_NAME }}
      - run: mv -f $HOME/rpmbuild/RPMS/x86_64/yass-client-debuginfo-1.0.0-1.el8.x86_64.rpm ${{ env.DBG_CLIENT_BUNDLE_NAME }}
      - name: Upload dist tarball (including debuginfo)
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ${{ env.BUNDLE_NAME }} ${{ env.DBG_BUNDLE_NAME }} ${{ env.SERVER_BUNDLE_NAME }} ${{ env.DBG_SERVER_BUNDLE_NAME }} ${{ env.CLIENT_BUNDLE_NAME }} ${{ env.DBG_CLIENT_BUNDLE_NAME }}
  debian-release:
    strategy:
      fail-fast: false
      matrix:
        container:
        - 'ubuntu16.04'
        - 'ubuntu18.04'
        - 'ubuntu20.04'
        - 'debian9'
        - 'debian10'
        - 'debian11'
    env:
      BUNDLE_NAME: 'yass-${{ matrix.container }}-${{ github.event.release.tag_name }}_amd64.deb'
      DBG_BUNDLE_NAME: 'yass-${{ matrix.container }}-${{ github.event.release.tag_name }}-dbg_amd64.deb'
      SERVER_BUNDLE_NAME: 'yass-server-${{ matrix.container }}-${{ github.event.release.tag_name }}_amd64.deb'
      DBG_SERVER_BUNDLE_NAME: 'yass-server-${{ matrix.container }}-${{ github.event.release.tag_name }}-dbg_amd64.deb'
      CLIENT_BUNDLE_NAME: 'yass-client-${{ matrix.container }}-${{ github.event.release.tag_name }}_amd64.deb'
      DBG_CLIENT_BUNDLE_NAME: 'yass-client-${{ matrix.container }}-${{ github.event.release.tag_name }}-dbg_amd64.deb'
    runs-on: ubuntu-latest
    needs: docker_publish
    container: 'ghcr.io/chilledheart/${{ matrix.container }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: '0'
      - name: Build Deb Packages
        run: |
          ./scripts/build-deb.sh
      - run: mv -f ../yass_1.0.0-1_amd64.deb ${{ env.BUNDLE_NAME }}
      - run: mv -f ../yass-dbg_1.0.0-1_amd64.deb ${{ env.DBG_BUNDLE_NAME }}
      - run: mv -f ../yass-server_1.0.0-1_amd64.deb ${{ env.SERVER_BUNDLE_NAME }}
      - run: mv -f ../yass-server-dbg_1.0.0-1_amd64.deb ${{ env.DBG_SERVER_BUNDLE_NAME }}
      - run: mv -f ../yass-client_1.0.0-1_amd64.deb ${{ env.CLIENT_BUNDLE_NAME }}
      - run: mv -f ../yass-client-dbg_1.0.0-1_amd64.deb ${{ env.DBG_CLIENT_BUNDLE_NAME }}
      - name: Upload dist tarball (including debuginfo)
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ${{ env.BUNDLE_NAME }} ${{ env.DBG_BUNDLE_NAME }} ${{ env.SERVER_BUNDLE_NAME }} ${{ env.DBG_SERVER_BUNDLE_NAME }} ${{ env.CLIENT_BUNDLE_NAME }} ${{ env.DBG_CLIENT_BUNDLE_NAME }}
  ubuntu-release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro: [focal]
        arch: [armhf, arm64]
    env:
      DEBIAN_FRONTEND: 'noninteractive'
      HOST_ARCH: '${{ matrix.arch }}'
      HOST_DISTRO: '${{ matrix.distro }}'
      BUNDLE_NAME: 'yass-ubuntu-${{ matrix.distro }}-${{ github.event.release.tag_name }}_${{ matrix.arch }}.deb'
      DBG_BUNDLE_NAME: 'yass-ubuntu-${{ matrix.distro }}-${{ github.event.release.tag_name }}-dbg_${{ matrix.arch }}.deb'
      SERVER_BUNDLE_NAME: 'yass-ubuntu-server-${{ matrix.distro }}-${{ github.event.release.tag_name }}_${{ matrix.arch }}.deb'
      DBG_SERVER_BUNDLE_NAME: 'yass-ubuntu-server-${{ matrix.distro }}-${{ github.event.release.tag_name }}-dbg_${{ matrix.arch }}.deb'
      CLIENT_BUNDLE_NAME: 'yass-ubuntu-client-${{ matrix.distro }}-${{ github.event.release.tag_name }}_${{ matrix.arch }}.deb'
      DBG_CLIENT_BUNDLE_NAME: 'yass-ubuntu-client-${{ matrix.distro }}-${{ github.event.release.tag_name }}-dbg_${{ matrix.arch }}.deb'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Populate depedencies (sbuild)
        run: sudo apt-get update -qq && sudo apt-get install -y debhelper sbuild schroot debootstrap ubuntu-dev-tools qemu-user-static
      - name: Copy sbuilrc
        run: |
          cp -fv sbuildrc ~/.sbuildrc
          sudo adduser "$USER" sbuild
          sudo chown -R sbuild:sbuild /var/lib/sbuild/
          sudo chmod g+rws /var/lib/sbuild/
      - name: Populate sysroot
        run: |
          sudo -u "$USER" -g sbuild mk-sbuild ${{ env.HOST_DISTRO }} --target=${{ env.HOST_ARCH }}
          sudo sed -i '/profile/d' /etc/schroot/chroot.d/*
      - name: Build deb (source)
        run: |
          SOURCE_ONLY=1 ./scripts/build-deb.sh
      - name: Populate depedencie (ca-certificates)
        run: |
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-$(dpkg-architecture -q DEB_BUILD_ARCH)-${{ env.HOST_ARCH }}" --user root -- apt-get install -y ca-certificates
      - name: Populate depedencie
        run: |
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-$(dpkg-architecture -q DEB_BUILD_ARCH)-${{ env.HOST_ARCH }}" --user root -- apt-get build-dep -y --host-architecture=${{ env.HOST_ARCH }} ../yass
      - name: Shutdown schroot sessions
        run: |
          sudo schroot --end-session --all-sessions
      - name: Build deb
        run: |
          sudo -E -u "$USER" -g sbuild ./scripts/build-deb.sh || exit 0
      - name: Output build log
        run: |
          cat /tmp/yass*.build
      - run: mv -f ../yass_1.0.0-1_${{ env.HOST_ARCH }}.deb ${{ env.BUNDLE_NAME }}
      - run: mv -f ../yass-dbg_1.0.0-1_${{ env.HOST_ARCH }}.deb ${{ env.DBG_BUNDLE_NAME }}
      - run: mv -f ../yass-server_1.0.0-1_${{ env.HOST_ARCH }}.deb ${{ env.SERVER_BUNDLE_NAME }}
      - run: mv -f ../yass-server-dbg_1.0.0-1_${{ env.HOST_ARCH }}.deb ${{ env.DBG_SERVER_BUNDLE_NAME }}
      - run: mv -f ../yass-client_1.0.0-1_${{ env.HOST_ARCH }}.deb ${{ env.CLIENT_BUNDLE_NAME }}
      - run: mv -f ../yass-client-dbg_1.0.0-1_${{ env.HOST_ARCH }}.deb ${{ env.DBG_CLIENT_BUNDLE_NAME }}
      - name: Upload dist tarball (including debuginfo)
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ${{ env.BUNDLE_NAME }} ${{ env.DBG_BUNDLE_NAME }} ${{ env.SERVER_BUNDLE_NAME }} ${{ env.DBG_SERVER_BUNDLE_NAME }} ${{ env.CLIENT_BUNDLE_NAME }} ${{ env.DBG_CLIENT_BUNDLE_NAME }}
