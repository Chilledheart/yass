name: Build Artifacts (Ubuntu)
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
  pull_request:
  push:
    branches: [master]
    paths-ignore: [README.md, BUILDING.md]
  release:
    types: [published]
env:
  CACHE_EPOCH: 0
  GOPROXY: direct
jobs:
  cache-toolchain-ubuntu:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Cache clang
        id: clang-cache
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: "Install dependency: prebuilt clang and clang-tidy binaries"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          ./scripts/download-clang-prebuilt-binaries.py
          rm -f third_party/llvm-build/Release+Asserts/*.tgz

  ubuntu-latest:
    needs: cache-toolchain-ubuntu
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
      COMPILER: '${{ matrix.compiler }}'
    steps:
      - uses: actions/checkout@v2
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Cache golang
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Change ubuntu mirror
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -qq
      - name: Populate depedencies
        run: sudo apt-get update -qq && sudo apt-get install -y cmake ninja-build libgtk-3-dev
      - name: Build
        run: |
          if [ "$COMPILER" = "clang" ]; then
            export CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang
            export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
          else
            export CC=gcc
            export CXX=g++
          fi
          mkdir build
          cd build
          cmake -G Ninja -DCLI=on -DSERVER=on -DGUI=on ..
          ninja -v yass_cli yass_server yass
          cd ..
  ubuntu-latest-clang-tidy:
    needs: cache-toolchain-ubuntu
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v2
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang
        uses: actions/cache@v2
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Cache golang
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Change ubuntu mirror
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -qq
      - name: Populate depedencies
        run: sudo apt-get update -qq && sudo apt-get install -y cmake ninja-build libgtk-3-dev
      - name: Build
        run: |
          export CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang
          export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
          export CLANG_TIDY_EXECUTABLE=$PWD/third_party/llvm-build/Release+Asserts/bin/clang-tidy
          mkdir build
          cd build
          cmake -G Ninja -DENABLE_CLANG_TIDY=yes -DCLANG_TIDY_EXECUTABLE="$CLANG_TIDY_EXECUTABLE" -DCLI=on -DSERVER=on -DGUI=on ..
          ninja -v yass_cli yass_server yass
          cd ..
  ubuntu-release:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        distro: [bionic, focal, stretch, buster, bullseye]
        arch: [i386, amd64, armhf, arm64]
        include:
          - distro: xenial
            arch: i386
          - distro: xenial
            arch: amd64
          - distro: stretch
            arch: mipsel
          - distro: stretch
            arch: mips64el
          - distro: buster
            arch: mipsel
          - distro: buster
            arch: mips64el
          - distro: bullseye
            arch: mipsel
          - distro: bullseye
            arch: mips64el
          - distro: stretch
            arch: armel
          - distro: buster
            arch: armel
          - distro: bullseye
            arch: armel
    env:
      DEBIAN_FRONTEND: 'noninteractive'
      HOST_ARCH: '${{ matrix.arch }}'
      HOST_DISTRO: '${{ matrix.distro }}'
    steps:
      - uses: actions/checkout@v2
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache golang
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.cache/go-build
            /tmp/go/pkg/mod
          key: ${{ runner.os }}-go-tmp-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-tmp-
      - name: Change ubuntu mirror
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -qq
      - name: Populate depedencies (sbuild, upgrade for null-resolver)
        run: |
          cd /tmp
          curl -O http://archive.ubuntu.com/ubuntu/pool/main/s/sbuild/sbuild_0.79.0-1ubuntu1_all.deb
          curl -O http://archive.ubuntu.com/ubuntu/pool/main/s/sbuild/libsbuild-perl_0.79.0-1ubuntu1_all.deb
          sudo apt-get install -f -y $PWD/sbuild*.deb $PWD/libsbuild*.deb
          rm -f *.deb
      - name: Populate depedencies (debian keyring, for debian distributions)
        run: |
          cd /tmp
          curl -O http://archive.ubuntu.com/ubuntu/pool/universe/d/debian-keyring/debian-keyring_2020.03.24_all.deb
          curl -O http://archive.ubuntu.com/ubuntu/pool/universe/d/debian-archive-keyring/debian-archive-keyring_2019.1ubuntu2_all.deb
          sudo apt-get install -f -y $PWD/debian*.deb
          rm -f *.deb
      - name: Populate depedencies (debhelper, for correct dh_shlibdeps path)
        run: |
          cd /tmp
          curl -O http://archive.ubuntu.com/ubuntu/pool/main/d/debhelper/debhelper_12.10ubuntu1_all.deb
          curl -O http://archive.ubuntu.com/ubuntu/pool/main/d/debhelper/libdebhelper-perl_12.10ubuntu1_all.deb
          sudo apt-get install -f -y $PWD/*.deb
          rm -f *.deb
      - name: Populate depedencies (schroot, debootstrap and ubuntu-dev-tools)
        run: sudo apt-get update -qq && sudo apt-get install -y schroot debootstrap ubuntu-dev-tools qemu-user-static
      - name: Copy sbuilrc
        run: |
          cp -fv sbuildrc ~/.sbuildrc
          sudo usermod -aG sudo "$USER"
          sudo usermod -aG sbuild "$USER"
          sudo chown -R sbuild:sbuild /var/lib/sbuild/
          sudo chmod g+rws /var/lib/sbuild/
      - name: Pre-Populate sysroot (distro option)
        if: ${{ env.HOST_DISTRO == 'stretch' || env.HOST_DISTRO == 'buster' || env.HOST_DISTRO == 'bullseye' }}
        run: |
          echo "mksbuild_distro_opts=--distro=debian" >> $GITHUB_ENV
      - name: Pre-Populate BUILD_ARCH (i386)
        if: ${{ env.HOST_ARCH == 'i386' }}
        run: |
          echo "mksbuild_arch_opts=--arch=i386" >> $GITHUB_ENV
          echo "BUILD_ARCH=i386" >> $GITHUB_ENV
      - name: Pre-Populate BUILD_ARCH (amd64)
        if: ${{ env.HOST_ARCH != 'i386' }}
        run: |
          echo "mksbuild_arch_opts=--arch=amd64" >> $GITHUB_ENV
          echo "BUILD_ARCH=$(dpkg-architecture -q DEB_BUILD_ARCH)" >> $GITHUB_ENV
      - name: Populate sysroot
        run: |
          # mk-sbuild may fail due to the missing pkg-config-<gnu-type>, but it
          # should be fine, will create pkg-config shim in next step
          sudo -n sudo -u "$USER" -g sbuild mk-sbuild ${{ env.mksbuild_arch_opts }} ${{ env.HOST_DISTRO }} --target=${{ env.HOST_ARCH }} --skip-proposed ${{ env.mksbuild_distro_opts }} || true
          sudo sed -i '/profile/d' /etc/schroot/chroot.d/*
      - name: Populate sysroot (bullseye only, fix security repo)
        if: ${{ env.HOST_DISTRO == 'bullseye' }}
        run: |
          # The format of the /etc/apt/sources.list line for the security repository has changed.
          # https://wiki.debian.org/NewInBullseye
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            sed -i 's/security.debian.org\/ ${{ env.HOST_DISTRO }}\/updates/security.debian.org\/debian-security ${{ env.HOST_DISTRO }}-security/g' /etc/apt/sources.list
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get update -qq
      - name: Populate sysroot (crosscompile toolchain)
        if: ${{ env.HOST_ARCH != 'i386' && env.HOST_ARCH != 'amd64' }}
        run: |
          export HOST_GNU_TYPE=$(dpkg-architecture -a ${{ env.HOST_ARCH }} -q DEB_HOST_GNU_TYPE)
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            dpkg --add-architecture ${{ env.HOST_ARCH }}
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get update -qq
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -y dpkg-cross pkg-config gcc-$HOST_GNU_TYPE g++-$HOST_GNU_TYPE libc6:${{ env.HOST_ARCH }} libstdc++6:${{ env.HOST_ARCH }} linux-libc-dev:${{ env.HOST_ARCH }}
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            ln -sf /usr/share/pkg-config-crosswrapper /usr/bin/${HOST_GNU_TYPE}-pkg-config
      - name: Populate sysroot (standard toolchain)
        run: |
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -y fakeroot advancecomp apt-utils file build-essential pkg-config debhelper lockfile-progs optipng pkg-config tzdata ucf
      - name: Populate sysroot (xenial only, ubuntu test toolchain)
        if: ${{ env.HOST_DISTRO == 'xenial' }}
        run: |
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -y software-properties-common apt-transport-https
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            bash -c 'echo "deb http://archive.ubuntu.com/ubuntu xenial-backports main" >> /etc/apt/sources.list'
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get update -qq
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -y gcc-7 g++-7
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -y -t xenial-backports debhelper
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            update-alternatives \
              --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 \
              --slave /usr/bin/g++ g++ /usr/bin/g++-7  \
              --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-7 \
              --slave /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-7 \
              --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-7
      - name: Populate sysroot (ca-certificates, git)
        run: |
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -y ca-certificates git
      - name: Populate sysroot (golang toolchain)
        run: |
          cd /tmp
          curl -O http://deb.debian.org/debian/pool/main/g/golang-defaults/golang_1.17~1~bpo11+2_${{ env.BUILD_ARCH }}.deb
          curl -O http://deb.debian.org/debian/pool/main/g/golang-defaults/golang-go_1.17~1~bpo11+2_${{ env.BUILD_ARCH }}.deb
          curl -O http://deb.debian.org/debian/pool/main/g/golang-defaults/golang-src_1.17~1~bpo11+2_all.deb
          curl -O http://deb.debian.org/debian/pool/main/g/golang-defaults/golang-doc_1.17~1~bpo11+2_all.deb
          curl -O http://deb.debian.org/debian/pool/main/g/golang-1.17/golang-1.17_1.17.7-1~bpo11+1_all.deb
          curl -O http://deb.debian.org/debian/pool/main/g/golang-1.17/golang-1.17-go_1.17.7-1~bpo11+1_${{ env.BUILD_ARCH }}.deb
          curl -O http://deb.debian.org/debian/pool/main/g/golang-1.17/golang-1.17-src_1.17.7-1~bpo11+1_all.deb
          curl -O http://deb.debian.org/debian/pool/main/g/golang-1.17/golang-1.17-doc_1.17.7-1~bpo11+1_all.deb
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -f -y $PWD/golang*.deb
      - name: Set nogui build profile (armel/mipsel/mips64el only)
        if: ${{ env.HOST_ARCH == 'armel' ||  env.HOST_ARCH == 'mipsel' || env.HOST_ARCH == 'mips64el' }}
        run: |
          echo "DEB_BUILD_PROFILES=nogui ${{ env.DEB_BUILD_PROFILES}}" >> $GITHUB_ENV
          echo "APT_DEB_BUILD_PROFILES=-o Apt::Build-Profiles=nogui" >> $GITHUB_ENV
      - name: Set nocxxruntime build profile (xenial only)
        if: ${{ env.HOST_DISTRO == 'xenial' }}
        run: |
          echo "DEB_BUILD_PROFILES=nocxxruntime ${{ env.DEB_BUILD_PROFILES}}" >> $GITHUB_ENV
      - name: Build deb (source)
        run: |
          export DEB_BUILD_PROFILES
          SOURCE_ONLY=1 ./scripts/build-deb.sh
      - name: Populate depedencie (focal i386 only, software-properties-common)
        if: ${{ env.HOST_DISTRO == 'focal' && env.HOST_ARCH == 'i386' }}
        run: |
          # missing for software-properties-common
          # not required by focal, but let's install them any way...
          cd /tmp
          curl -O http://deb.debian.org/debian/pool/main/p/packagekit/gir1.2-packagekitglib-1.0_1.2.2-2_i386.deb
          curl -O http://deb.debian.org/debian/pool/main/p/packagekit/libpackagekit-glib2-18_1.2.2-2_i386.deb
          curl -O http://deb.debian.org/debian/pool/main/p/packagekit/packagekit_1.2.2-2_i386.deb
          curl -O http://deb.debian.org/debian/pool/main/a/appstream/libappstream4_0.14.4-1_i386.deb
          curl -O http://deb.debian.org/debian/pool/main/a/apt/libapt-pkg6.0_2.2.4_i386.deb
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -f -y $PWD/gir*.deb $PWD/lib*.deb $PWD/packagekit*.deb
      - name: Populate depedencie (openssl, required by xenial cmake)
        if: ${{ env.HOST_DISTRO == 'stretch' || env.HOST_DISTRO == 'buster' }}
        run: |
          cd /tmp
          curl -O http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.0.0_1.0.2g-1ubuntu4_${{ env.BUILD_ARCH }}.deb
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -y $PWD/libssl1.0.0_1.0.2g-1ubuntu4_${{ env.BUILD_ARCH }}.deb
      - name: Populate depedencie (xenial cmake)
        if: ${{ env.HOST_DISTRO == 'xenial' || env.HOST_DISTRO == 'bionic' || env.HOST_DISTRO == 'stretch' || env.HOST_DISTRO == 'buster' }}
        run: |
          cd /tmp
          curl -O https://apt.kitware.com/keys/kitware-archive-latest.asc
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -y software-properties-common apt-transport-https
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-key add $PWD/kitware-archive-latest.asc
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-add-repository 'deb [arch=${{ env.BUILD_ARCH }}] https://apt.kitware.com/ubuntu/ xenial main'
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get update -qq
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get install -y cmake
      - name: Populate depedencie
        run: |
          sudo schroot --chroot "source:${{ env.HOST_DISTRO }}-${{ env.BUILD_ARCH }}-${{ env.HOST_ARCH }}" --user root -- \
            apt-get ${{ env.APT_DEB_BUILD_PROFILES }} build-dep -y --host-architecture=${{ env.HOST_ARCH }} ../yass
      - name: Shutdown schroot sessions
        run: |
          sudo schroot --end-session --all-sessions
      - name: Build deb
        run: |
          export DEB_BUILD_PROFILES
          sudo -E sudo -E -u "$USER" -g sbuild ./scripts/build-deb.sh
      - name: Upload dist tarball (including debuginfo)
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} yass*.deb
