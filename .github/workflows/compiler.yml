name: Compiler Compatibility
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
  pull_request:
  push:
    branches: [master, develop]
    paths-ignore: [README.md, BUILDING.md]
env:
  CACHE_EPOCH: 0
  GOPROXY: direct
jobs:
  win-compiler-compatible-2019:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86]
        crt-linkage: [static]
        build_type: [Debug, Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang, nasm and wixtoolset 3
        id: clang-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
            third_party/wix311
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: "Download dependency: clang, nasm and wixtoolset 3"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          scripts\download-toolchain.bat
      - name: Build
        run: |
          set VCToolsVersion=14.29
          set Winsdk=10.0.19041.0
          set "WindowsSDKVersion=%Winsdk%\"
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          set "CC=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"
          set "CXX=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"
          set Platform=${{ matrix.arch }}

          set "Path=%CD%\third_party\nasm;%Path%"
          set "Path=%CD%\third_party\wix311;%Path%"

          call "%vsdevcmd%" -arch=%Platform% -host_arch=amd64 -winsdk=%Winsdk% -no_logo -vcvars_ver=%VCToolsVersion%

          tools\build -msvc-tgt-arch=${{ matrix.arch }} -msvc-crt-linkage=${{ matrix.crt-linkage }} -use-libcxx=false -build-test -no-packaging || exit /b

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
      - name: Run tests
        run: |
          cd build-msvc-${{ matrix.arch }}-${{ matrix.crt-linkage }}
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=50 --gtest_throw_on_failure
  win-compiler-compatible-2022:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86]
        crt-linkage: [static]
        build_type: [Debug, Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang, nasm and wixtoolset 3
        id: clang-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
            third_party/wix311
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: "Download dependency: clang, nasm and wixtoolset 3"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          scripts\download-toolchain.bat
      - name: Build
        run: |
          set VCToolsVersion=
          set Winsdk=10.0.19041.0
          set "WindowsSDKVersion=%Winsdk%\"
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          set "CC=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"
          set "CXX=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"
          set Platform=${{ matrix.arch }}

          set "Path=%CD%\third_party\nasm;%Path%"
          set "Path=%CD%\third_party\wix311;%Path%"

          call "%vsdevcmd%" -arch=%Platform% -host_arch=amd64 -winsdk=%Winsdk% -no_logo -vcvars_ver=%VCToolsVersion%

          tools\build -msvc-tgt-arch=${{ matrix.arch }} -msvc-crt-linkage=${{ matrix.crt-linkage }} -use-libcxx=false -build-test -no-packaging || exit /b

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
      - name: Run tests
        run: |
          cd build-msvc-${{ matrix.arch }}-${{ matrix.crt-linkage }}
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=50 --gtest_throw_on_failure
  mingw64-compiler-compatible-msys2:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        build_type: [Debug, Release]
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang, nasm and wixtoolset 3
        id: clang-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
            third_party/wix311
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-
      - name: "Download dependency: clang, nasm and wixtoolset 3"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          scripts\download-toolchain.bat
      - name: Build
        run: |
          set CC=clang
          set CXX=clang++
          set "CFLAGS=-target x86_64-pc-windows-gnu --sysroot C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32 -I C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include"
          set "CXXFLAGS=-target x86_64-pc-windows-gnu --sysroot C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32 -I C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include"
          set "LDFLAGS=-target x86_64-pc-windows-gnu --sysroot C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32 -Wl,-LC:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0"
          set "Path=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja;%Path%"
          REM for crtbegin.o, crt2.o and crtend.o
          set "Path=C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib;%Path%"
          set "Path=%CD%\third_party\nasm;%Path%"
          REM for clang.exe and clang++.exe
          REM set "Path=C:\Program Files\LLVM\bin;%Path%"

          REM remove conflicting heaaders
          del "C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\std*.h"
          del "C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\*intrin.h"
          del "C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\mm3dnow.h"

          REM start to build with workaround
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTS=on -DGUI=on -DMINGW_WORKAROUND=on ..
          ninja yass yass_test
      - name: Run unittests
        run: |
          cd build
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=50 --gtest_throw_on_failure
  linux-compiler-compatible:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        build_type: [Release]
        cxxruntime: [libstdc++, libc++]
        exclude:
          - compiler: gcc
            cxxruntime: libc++
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang (v12.0)
        id: clang12-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04
          key: ${{ runner.os }}-toolchain-clang12-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-clang12-
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: Change ubuntu mirror
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/azure.archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -qq
      - name: "Install dependency: clang 12"
        if: ${{ steps.clang12-cache.outputs.cache-hit != 'true' }}
        run: |
          curl -L -O https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz
          tar -C third_party -xvf clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz \
            clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/lib/clang/12.0.1/include \
            clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/{clang,clang++,clang-12,ld.lld,lld,llvm-ar,llvm-ranlib}
          rm -f *.xz
      - name: Populate depedencies
        run: sudo apt-get update -qq && sudo apt-get install -y cmake ninja-build libgtk-3-dev libncurses5 gettext
      - name: Set build options
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            echo "CC=${{ github.workspace }}/third_party/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/clang" >> $GITHUB_ENV
            echo "CXX=${{ github.workspace }}/third_party/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/clang++" >> $GITHUB_ENV
          fi
          if [ "${{ matrix.cxxruntime }}" = "libc++" ]; then
            echo build_opts="${{ env.build_opts }} -use-libcxx=1" >> $GITHUB_ENV
          else
            echo build_opts="${{ env.build_opts }} -use-libcxx=0" >> $GITHUB_ENV
          fi
      - name: Build
        run: |
          ./tools/build -no-packaging ${{ env.build_opts }} -build-test
      - name: Run tests
        run: |
          cd build-linux-amd64
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=100 --gtest_throw_on_failure
  mac-compiler-compatible:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, macos-12]
        build_type: [Debug, Release]
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: Populate depedencies
        run: |
          # brew update
          # brew install ninja cmake p7zip
          brew install ninja
      - name: Set up Xcode to 12.5.1 (macos 11)
        if: ${{ matrix.os == 'macos-11' }}
        run: |
          sudo xcode-select -s /Applications/Xcode_12.5.1.app
      - name: Set up Xcode to 14.2 (macos 12)
        if: ${{ matrix.os == 'macos-12' }}
        run: |
          sudo xcode-select -s /Applications/Xcode_14.2.app
      - name: Build
        run: |
          ./tools/build -no-packaging -macosx-universal-build=false -build-test
      - name: Run tests
        run: |
          cd build-darwin-amd64
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=100 --gtest_throw_on_failure
