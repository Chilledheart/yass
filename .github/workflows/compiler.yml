name: Compiler Compatibility
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
  pull_request:
  push:
    branches: [master]
    paths-ignore: [README.md, BUILDING.md]
  release:
    types: [published]
env:
  CACHE_EPOCH: 5
  GOPROXY: direct
jobs:
  win-compiler-compatible-2019:
    runs-on: windows-2019
    if: ${{ github.event_name != 'release' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86]
        crt-linkage: [static]
        build_type: [Debug, Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang, nasm and wixtoolset 3
        id: clang-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
            third_party/wix311
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: "Download dependency: clang, nasm and wixtoolset 3"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          scripts\download-toolchain.bat
          del /s /q nasm-2.15*.zip
          del /s /q third_party\llvm-build\Release+Asserts\*.tgz
          del /s /q wix311*.zip
      - name: Build Vistual Studio 2019 (v142)
        run: |
          set VCToolsVersion=14.29
          set Winsdk=10.0.19041.0
          set "WindowsSDKVersion=%Winsdk%\"
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          set Platform=${{ matrix.arch }}

          set "Path=%CD%\third_party\nasm;%Path%"
          set "Path=%CD%\third_party\wix311;%Path%"

          call "%vsdevcmd%" -arch=%Platform% -host_arch=amd64 -winsdk=%Winsdk% -no_logo -vcvars_ver=%VCToolsVersion%

          tools\build -msvc-tgt-arch=${{ matrix.arch }} -msvc-crt-linkage=${{ matrix.crt-linkage }} -use-libcxx=false -build-test -no-packaging || exit /b

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
      - name: Run tests
        run: |
          set VCToolsVersion=14.29
          set Winsdk=10.0.19041.0
          set "WindowsSDKVersion=%Winsdk%\"
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          set Platform=${{ matrix.arch }}

          set "Path=%CD%\third_party\nasm;%Path%"
          set "Path=%CD%\third_party\wix311;%Path%"

          call "%vsdevcmd%" -arch=%Platform% -host_arch=amd64 -winsdk=%Winsdk% -no_logo -vcvars_ver=%VCToolsVersion%

          tools\build -nc -msvc-tgt-arch=${{ matrix.arch }} -msvc-crt-linkage=${{ matrix.crt-linkage }} -use-libcxx=false -run-test -no-packaging -verbose 2 || exit /b

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
  win-compiler-compatible-2022:
    runs-on: windows-2022
    if: ${{ github.event_name != 'release' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86]
        crt-linkage: [static]
        build_type: [Debug, Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang, nasm and wixtoolset 3
        id: clang-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
            third_party/wix311
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: "Download dependency: clang, nasm and wixtoolset 3"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          scripts\download-toolchain.bat
          del /s /q nasm-2.15*.zip
          del /s /q third_party\llvm-build\Release+Asserts\*.tgz
          del /s /q wix311*.zip
      - name: Build Vistual Studio 2022 (v143)
        run: |
          set VCToolsVersion=
          set Winsdk=10.0.19041.0
          set "WindowsSDKVersion=%Winsdk%\"
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          set Platform=${{ matrix.arch }}

          set "Path=%CD%\third_party\nasm;%Path%"
          set "Path=%CD%\third_party\wix311;%Path%"

          call "%vsdevcmd%" -arch=%Platform% -host_arch=amd64 -winsdk=%Winsdk% -no_logo -vcvars_ver=%VCToolsVersion%

          tools\build -msvc-tgt-arch=${{ matrix.arch }} -msvc-crt-linkage=${{ matrix.crt-linkage }} -use-libcxx=false -build-test -no-packaging || exit /b

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
      - name: Run tests
        run: |
          set VCToolsVersion=
          set Winsdk=10.0.19041.0
          set "WindowsSDKVersion=%Winsdk%\"
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          set Platform=${{ matrix.arch }}

          set "Path=%CD%\third_party\nasm;%Path%"
          set "Path=%CD%\third_party\wix311;%Path%"

          call "%vsdevcmd%" -arch=%Platform% -host_arch=amd64 -winsdk=%Winsdk% -no_logo -vcvars_ver=%VCToolsVersion%

          tools\build -nc -msvc-tgt-arch=${{ matrix.arch }} -msvc-crt-linkage=${{ matrix.crt-linkage }} -use-libcxx=false -run-test -no-packaging -verbose 2 || exit /b

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
  mingw64-compiler-compatible-msys2:
    runs-on: windows-2019
    if: ${{ github.event_name != 'release' }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        distro: [clang64]
        arch: [x86_64]
        include:
          - build_type: Release
            distro: clang32
            arch: i686
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Re-add msys2 into PATH
        shell: bash
        run: |
          python -c "import os; print(os.getenv('PATH'))"
          PATH1=$(python -c "import os; print(os.getenv('PATH'), end ='')")
          echo "PATH=C:\msys64\${{ matrix.distro }}\bin;C:\msys64\usr\bin;$PATH1" >> $GITHUB_ENV
      - name: Populate build depedencies
        shell: cmd
        run: |
          pacman -S --noconfirm --needed --noprogressbar ^
            mingw-w64-clang-${{ matrix.arch }}-clang ^
            mingw-w64-clang-${{ matrix.arch }}-gcc ^
            mingw-w64-clang-${{ matrix.arch }}-nasm ^
            mingw-w64-clang-${{ matrix.arch }}-ninja
      - name: Build
        shell: cmd
        run: |
          set CC=cc
          set CXX=c++
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTS=on -DGUI=on ..
          ninja yass yass_test
      - name: Run unittests
        shell: cmd
        run: |
          cd build
          yass_test -alsologtostderr -v 2
  linux-compiler-compatible:
    runs-on: ubuntu-20.04
    if: ${{ github.event_name != 'release' }}
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        build_type: [Release]
        cxxruntime: [libstdc++, libc++]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang (v12.0)
        id: clang12-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04
          key: ${{ runner.os }}-toolchain-clang12-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-clang12-
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: Change ubuntu mirror
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -qq
      - name: "Install dependency: clang 12"
        if: ${{ steps.clang12-cache.outputs.cache-hit != 'true' }}
        run: |
          curl -L -O https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz
          tar -C third_party -xvf clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz \
            clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/lib/clang/12.0.1/include \
            clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/{clang,clang++,clang-12,ld.lld,lld,llvm-ar,llvm-ranlib}
          rm -f *.xz
      - name: "Install dependency: gcc 11"
        if: ${{ matrix.compiler == 'gcc' }}
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/test && sudo apt-get update -qq && sudo apt-get install -y gcc-11 g++-11
      - name: Populate depedencies
        run: sudo apt-get update -qq && sudo apt-get install -y cmake ninja-build libgtk-3-dev libncurses5
      - name: Set build options
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            echo "CC=${{ github.workspace }}/third_party/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/clang" >> $GITHUB_ENV
            echo "CXX=${{ github.workspace }}/third_party/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/clang++" >> $GITHUB_ENV
          else
            echo CC=gcc-11 >> $GITHUB_ENV
            echo CXX=g++-11 >> $GITHUB_ENV
          fi
          if [ "${{ matrix.cxxruntime }}" = "libc++" ]; then
            echo build_opts="${{ env.build_opts }} -use-libcxx=1" >> $GITHUB_ENV
          else
            echo build_opts="${{ env.build_opts }} -use-libcxx=0" >> $GITHUB_ENV
          fi
      - name: Patch libcxx for gcc
        run: |
          cd third_party/libc++/trunk
          patch -p1 < ../gcc-using-if-exist.patch
      - name: Build
        run: |
          ./tools/build -no-packaging ${{ env.build_opts }} -build-test
      - name: Run tests
        run: |
          ./tools/build -nc -no-packaging ${{ env.build_opts }} -run-test -verbose 2
  mac-compiler-compatible:
    if: ${{ github.event_name != 'release' }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11]
        build_type: [Release]
        compiler: [gcc, clang]
        include:
          - os: macos-12
            build_type: Release
            compiler: clang
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: Patch libcxx for gcc
        run: |
          cd third_party/libc++/trunk
          patch -p1 < ../gcc-using-if-exist.patch
      - name: Patch libcxx for gcc
        run: |
          cd third_party/libc++/trunk
          patch -p1 < ../gcc-mac.patch
      - name: Set build options
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "CC=gcc-11" >> $GITHUB_ENV
            echo "CXX=g++-11" >> $GITHUB_ENV
            echo "GNU_DEPS=gtk+3" >> $GITHUB_ENV
          fi
      - name: Remove homebrew conflicts
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            rm -f /usr/local/bin/2to3 /usr/local/bin/idle3 /usr/local/bin/pydoc3 /usr/local/bin/python3 /usr/local/bin/python3-config
          fi
      - name: Populate depedencies
        run: |
          # brew update
          # brew install ninja cmake p7zip ${{ env.GNU_DEPS }}
          brew install ninja ${{ env.GNU_DEPS }}
      - name: Set up Xcode to 14.2 (macos 12)
        if: ${{ matrix.os == 'macos-12' }}
        run: |
          sudo xcode-select -s /Applications/Xcode_14.2.app
      - name: Build
        run: |
          # required by gcc lto
          ulimit -n 4096
          ./tools/build -no-packaging -macosx-universal-build=false -build-test
      - name: Run tests
        run: |
          # required by gcc lto
          ulimit -n 4096
          ./tools/build -nc -no-packaging -macosx-universal-build=false -run-test -verbose 2
