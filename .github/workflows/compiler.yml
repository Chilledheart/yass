name: Compiler Compatibility
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
  pull_request:
    branches: [master, develop]
    paths-ignore:
    - '**/*.md'
    - '.circleci/**'
    - '.cirrus.yml'
  push:
    branches: [master, develop]
    paths-ignore:
    - '**/*.md'
    - '.circleci/**'
    - '.cirrus.yml'
env:
  CACHE_EPOCH: 120-1
  GOPROXY: direct
jobs:
  win-compiler-compatible-2022:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86]
        crt-linkage: [static]
        build_type: [Debug, Release]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v4
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang, nasm and wixtoolset 3
        id: clang-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/nasm
            third_party/llvm-build/Release+Asserts
            third_party/wix311
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Cache msvc curl
        id: curl-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/libcurl-vc16-x64-release-static-ipv6-sspi-schannel
            third_party/libcurl-vc16-x86-release-static-ipv6-sspi-schannel
          key: ${{ runner.os }}-msvc-curl-vc16-${{ matrix.arch }}-v${{ env.CACHE_EPOCH }}
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: "Download dependency: clang, nasm and wixtoolset 3"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          scripts\download-toolchain.bat
      - name: "Download dependency: curl"
        if: ${{ steps.curl-cache.outputs.cache-hit != 'true' }}
        run: |
          scripts\download-curl-msvc.bat ${{ matrix.arch }}
      - name: Build
        run: |
          set VCToolsVersion=
          set Winsdk=10.0.19041.0
          set "WindowsSDKVersion=%Winsdk%\"
          if "${{ matrix.arch }}" == "arm64" (call :SetNewVCToolsVersion)
          set vsdevcmd=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat
          set "VSCMD_START_DIR=%CD%"
          set "CC=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"
          set "CXX=%CD%\third_party\llvm-build\Release+Asserts\bin\clang-cl.exe"
          set Platform=${{ matrix.arch }}

          set "Path=%CD%\third_party\nasm;%Path%"
          set "Path=%CD%\third_party\wix311;%Path%"

          call "%vsdevcmd%" -arch=%Platform% -host_arch=amd64 -winsdk=%Winsdk% -no_logo -vcvars_ver=%VCToolsVersion%

          tools\build -msvc-tgt-arch=${{ matrix.arch }} -msvc-crt-linkage=${{ matrix.crt-linkage }} -use-libcxx=false -build-test -no-packaging || exit /b

          exit /b 0

          :SetNewVCToolsVersion
          set VCToolsVersion=
      - name: Run tests
        run: |
          cd build-msvc-${{ matrix.arch }}-${{ matrix.crt-linkage }}
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4a
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5h
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type http
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4a --ipv6_mode
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5 --ipv6_mode
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5h --ipv6_mode
          yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type http --ipv6_mode
  mingw64-compiler-compatible-crosscompiling:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [i686, x86_64]
        build_type: [Debug, Release]
        variant: [standard]
    steps:
      - uses: actions/checkout@v4
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang
        id: clang-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
      - name: Cache mingw64 llvm
        id: mingw-cache
        uses: actions/cache@v3
        with:
          path: |
            llvm-mingw-*.tar.xz
          key: ${{ runner.os }}-mingw64-llvm-v${{ env.CACHE_EPOCH }}
      - name: Cache mingw64 curl
        id: curl-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/curl-8.2.0_1-win64-mingw
            third_party/curl-8.2.0_1-win32-mingw
          key: ${{ runner.os }}-mingw64-curl-v${{ env.CACHE_EPOCH }}
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: Change ubuntu mirror
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/azure.archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -qq
      - name: "Install dependency: prebuilt clang and clang-tidy binaries"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          ./scripts/download-clang-prebuilt-binaries.py
          rm -f third_party/llvm-build/Release+Asserts/*.tgz
      - name: "Download dependency: llvm-mingw"
        if: ${{ steps.mingw-cache.outputs.cache-hit != 'true' }}
        run: |
          curl -L -O https://github.com/mstorsjo/llvm-mingw/releases/download/20220906/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64.tar.xz
      - name: "Download dependency: curl"
        if: ${{ steps.curl-cache.outputs.cache-hit != 'true' }}
        run: |
          cd third_party
          curl -L -O https://curl.se/windows/dl-8.2.0_1/curl-8.2.0_1-win64-mingw.zip
          7z x curl-8.2.0_1-win64-mingw.zip -aoa
          curl -L -O https://curl.se/windows/dl-8.2.0_1/curl-8.2.0_1-win32-mingw.zip
          7z x curl-8.2.0_1-win32-mingw.zip -aoa
          rm -vf curl*.zip
      - name: Populate llvm-mingw
        run: |
          sudo tar -C /opt -xvf llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64.tar.xz
          sudo ln -sf libclang_rt.builtins-i386.a /opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/lib/clang/15.0.0/lib/windows/libclang_rt.builtins-i686.a
      - name: Populate depedencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y cmake ninja-build nasm zip
          # required by mbedtls build
          sudo apt-get install -y python3-jsonschema python3-jinja2
      - name: Set toolchain cmake files
        run: |
          cat > MinGW.cmake << EOF
          # Sample toolchain file for building for Windows from an Ubuntu Linux system.
          #
          # Typical usage:
          #    *) install cross compiler: sudo apt-get install mingw-w64
          #    *) cd build
          #    *) cmake -DCMAKE_TOOLCHAIN_FILE=~/mingw-w64-x86_64.cmake ..

          set(CMAKE_SYSTEM_NAME Windows)
          set(CMAKE_SYSTEM_PROCESSOR ${{ matrix.arch }})
          set(GNU_TARGET ${{ matrix.arch }}-w64-mingw32)

          set(CMAKE_C_COMPILER_TARGET \${GNU_TARGET} CACHE STRING "")
          set(CMAKE_CXX_COMPILER_TARGET \${GNU_TARGET} CACHE STRING "")
          set(CMAKE_ASM_COMPILER_TARGET \${GNU_TARGET} CACHE STRING "")

          set(CMAKE_ASM_FLAGS "--rtlib=compiler-rt")
          set(CMAKE_C_FLAGS "--rtlib=compiler-rt")
          set(CMAKE_CXX_FLAGS "--rtlib=compiler-rt -stdlib=libc++")
          set(CMAKE_SHARED_LINKER_FLAGS "--rtlib=compiler-rt --unwindlib=libunwind")
          set(CMAKE_EXE_LINKER_FLAGS "--rtlib=compiler-rt --unwindlib=libunwind")
          set(USE_COMPILER_RT TRUE)
          set(USE_LIBUNWIND TRUE)
          set(COMPILER_RT_PATH "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/lib/clang/15.0.0/lib/windows/libclang_rt.builtins-${{ matrix.arch }}.a")

          # cross compilers to use for C and C++
          set(CMAKE_C_COMPILER "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/bin/clang")
          set(CMAKE_CXX_COMPILER "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/bin/clang++")
          set(CMAKE_LINKER "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/bin/ld.lld")
          set(CMAKE_AR "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/bin/llvm-ar")
          set(CMAKE_CXX_COMPILER_AR "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/bin/llvm-ar")
          set(CMAKE_RANLIB "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/bin/llvm-ranlib")
          set(CMAKE_CXX_COMPILER_RANLIB "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/bin/llvm-ranlib")
          # disabled because it is missing from binary
          # set(CMAKE_RC_COMPILER "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/bin/llvm-rc")
          set(CMAKE_RC_COMPILER "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/bin/\${GNU_TARGET}-windres")

          set(CMAKE_SYSROOT "/opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/\${GNU_TARGET}" CACHE STRING "")

          # target environment on the build host system
          set(CMAKE_FIND_ROOT_PATH /opt/llvm-mingw-20220906-msvcrt-ubuntu-18.04-x86_64/\${GNU_TARGET})

          # modify default behavior of FIND_XXX() commands
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          cat > Native.cmake << EOF
          set(CMAKE_C_COMPILER "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/clang")
          set(CMAKE_CXX_COMPILER "${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/clang++")
          EOF
      - name: Patch libcxx for windows xp
        run: |
          pushd third_party/libc++/trunk
          patch -p1 < ../winxp.patch
          popd
          pushd third_party/libc++abi/trunk
          patch -p1 < ../winxp.patch
          popd
          pushd third_party/benchmark
          patch -p1 < ../benchmark-winxp-fix.patch
          popd
          echo "CMAKE_OPTIONS=-DALLOW_XP=on" >> $GITHUB_ENV
      - name: Build
        run: |
          mkdir build-mingw
          cd build-mingw
          cmake -G Ninja -DGUI=on -DBUILD_TESTS=on .. \
            -DCMAKE_TOOLCHAIN_FILE="$PWD/../MinGW.cmake" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCROSS_TOOLCHAIN_FLAGS_TOOLCHAIN_FILE=\"$PWD/../Native.cmake\" \
            ${{ env.CMAKE_OPTIONS }}
          ninja yass yass_test
      - name: Populate depedencies (Tests-i686)
        if: ${{ matrix.arch == 'i686' }}
        run: |
          # copy curl dll required by yass_test
          cp -v third_party/curl-8.2.0_1-win32-mingw/bin/libcurl.dll build-mingw
          # fix for missing i386 deb packages from deb.sury.org repository
          sudo add-apt-repository ppa:ondrej/php
          # alternative fix is to downgrade overloaded libpcre2 versions with five locally installed packages which are PHP-related and came from deb.sury.org repository.
          # sudo apt-get install -y --allow-downgrades libpcre2-8-0=10.34-7ubuntu0.1 libpcre2-16-0=10.34-7ubuntu0.1 libpcre2-32-0=10.34-7ubuntu0.1 libpcre2-dev=10.34-7ubuntu0.1 libgd3=2.2.5-5.2ubuntu2.1
          sudo dpkg --add-architecture i386 && sudo apt-get update -qq && sudo apt-get install -y wine wine32
      - name: Populate depedencies (Tests-x86_64)
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          # copy curl dll required by yass_test
          cp -v third_party/curl-8.2.0_1-win64-mingw/bin/libcurl-x64.dll build-mingw
          sudo apt-get update -qq && sudo apt-get install -y wine wine64
      - name: Run tests
        run: |
          cd build-mingw
          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=25 --gtest_throw_on_failure
          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=25 --gtest_throw_on_failure --ipv6_mode

          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4
          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4a
          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5
          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5h
          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type http
          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4a --ipv6_mode
          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5 --ipv6_mode
          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5h --ipv6_mode
          wine yass_test.exe -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type http --ipv6_mode
  linux-compiler-compatible:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang]
        build_type: [Debug, Release]
        cxxruntime: [libc++]
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v4
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Cache clang (v15.0.6)
        id: clang15-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04
          key: ${{ runner.os }}-toolchain-clang15-v${{ env.CACHE_EPOCH }}
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: Change ubuntu mirror
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/azure.archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -qq
      - name: "Install dependency: clang 15"
        if: ${{ steps.clang15-cache.outputs.cache-hit != 'true' }}
        run: |
          curl -L -O https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.6/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04.tar.xz
          tar -C third_party -xvf clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04.tar.xz \
            clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04/lib/clang/15.0.6/include \
            clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04/bin/{clang,clang++,clang-15,ld.lld,lld,llvm-ar,llvm-ranlib}
          rm -f *.xz
      - name: Populate depedencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y cmake ninja-build libgtk-3-dev libncurses5 gettext
          # required by mbedtls build
          sudo apt-get install -y python3-jsonschema python3-jinja2
      - name: Populate depedencies (test purposes)
        run: sudo apt-get update -qq && sudo apt-get install -y libcurl4-openssl-dev
      - name: Set build options
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            echo "CC=${{ github.workspace }}/third_party/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04/bin/clang" >> $GITHUB_ENV
            echo "CXX=${{ github.workspace }}/third_party/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04/bin/clang++" >> $GITHUB_ENV
          fi
          if [ "${{ matrix.cxxruntime }}" = "libc++" ]; then
            echo build_opts="${{ env.build_opts }} -use-libcxx=1" >> $GITHUB_ENV
          else
            echo build_opts="${{ env.build_opts }} -use-libcxx=0" >> $GITHUB_ENV
          fi
      - name: Build
        run: |
          ./tools/build -no-packaging ${{ env.build_opts }} -build-test
      - name: Run tests
        run: |
          cd build-linux-amd64
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4a
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5h
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type http
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4a --ipv6_mode
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5 --ipv6_mode
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5h --ipv6_mode
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type http --ipv6_mode
  mac-compiler-compatible:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13]
        build_type: [Debug, Release]
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: '${{ matrix.build_type }}'
    steps:
      - uses: actions/checkout@v4
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.19.0'
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: Populate depedencies
        run: |
          # brew update
          # brew install ninja cmake p7zip
          brew install ninja
      - name: Set up Xcode to 14.2 (macos 12)
        if: ${{ matrix.os == 'macos-12' }}
        run: |
          sudo xcode-select -s /Applications/Xcode_14.2.app
      - name: Set up Xcode to 15 (macos 13)
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          # ignore buggy apple clang 13 from Xcode 13
          sudo xcode-select -s /Applications/Xcode_15.0.app
      - name: Build
        run: |
          ./tools/build -no-packaging -macosx-universal-build=false -build-test
      - name: Run tests
        run: |
          cd build-darwin-amd64
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4a
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5h
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type http
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks4a --ipv6_mode
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5 --ipv6_mode
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type socks5h --ipv6_mode
          ./yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=10 --gtest_throw_on_failure --proxy_type http --ipv6_mode
