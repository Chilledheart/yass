name: Build Artifacts (OpenWrt Binary)
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
  pull_request:
    branches: [master, develop]
    paths-ignore:
    - '**/*.md'
    - '.circleci/**'
    - '.cirrus.yml'
  push:
    branches: [master, develop]
    paths-ignore:
    - '**/*.md'
    - '.circleci/**'
    - '.cirrus.yml'
  release:
    types: [published]
env:
  CACHE_EPOCH: 116
  GOPROXY: direct
jobs:
  openwrt-binary-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            openwrt: 'target=x86 subtarget=64 abi=musl'
          - arch: x86
            openwrt: 'target=x86 subtarget=generic abi=musl'
    runs-on: ubuntu-20.04
    env:
      ARCH: ${{ matrix.arch }}
      OPENWRT_FLAGS: arch=${{ matrix.arch }} release=22.03.5 gcc_ver=11.2.0 ${{ matrix.openwrt }}
      SDK_ROOT: ${{ github.workspace }}/openwrt-sdk-${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v3
      - name: Checkout with shallow submodules
        run: |
          # unshallow must come first otherwise submodule may be get unshallowed
          git fetch --tags --unshallow
          git submodule update --init --depth 1
      - name: Patch libcxxabi for both of armel and armhf
        if: ${{ matrix.arch == 'armel' || matrix.arch == 'arm' }}
        run: |
          cd third_party/libc++abi
          patch -p1 < v8-6.7.17-fix-gcc-unwind-header.patch
      - name: Cache clang
        id: clang-cache
        uses: actions/cache@v3
        with:
          path: |
            third_party/llvm-build/Release+Asserts
          key: ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-v${{ env.CACHE_EPOCH }}
          restore-keys: |
            ${{ runner.os }}-toolchain-${{ hashFiles('CLANG_REVISION') }}-
      - name: Cache golang
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-docker-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-docker-
      - name: Cache openwrt sysroot
        id: openwrt-sysroot-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.SDK_ROOT }}
          key: openwrt-sysroot-v0-${{ matrix.arch }}-v${{ env.CACHE_EPOCH }}
      - name: Build build tool
        run: |
          cd tools
          go build
      - name: "Install dependency: prebuilt clang and clang-tidy binaries"
        if: ${{ steps.clang-cache.outputs.cache-hit != 'true' }}
        run: |
          ./scripts/download-clang-prebuilt-binaries.py
          rm -f third_party/llvm-build/Release+Asserts/*.tgz
      - name: Change ubuntu mirror
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/azure.archive.ubuntu.com/g' /etc/apt/sources.list
          sudo apt-get update -qq
      - name: "Install dependency: openwrt sysroot"
        if: ${{ steps.openwrt-sysroot-cache.outputs.cache-hit != 'true' }}
        run: |
          eval "$OPENWRT_FLAGS"

          mkdir -p $SDK_ROOT

          if [ "$subtarget" ]; then
            SDK_PATH=openwrt-sdk-$release-$target-${subtarget}_gcc-${gcc_ver}_${abi}.Linux-x86_64
          else
            subtarget='generic'
            SDK_PATH=openwrt-sdk-$release-${target}_gcc-${gcc_ver}_${abi}.Linux-x86_64
          fi

          SDK_URL=https://downloads.openwrt.org/releases/$release/targets/$target/$subtarget/$SDK_PATH.tar.xz
          curl -L -O $SDK_URL

          #full_root=$SDK_PATH/staging_dir/toolchain-*_gcc-${gcc_ver}_${abi}
          full_root=$(tar -tf $SDK_PATH.tar.xz "$SDK_PATH/staging_dir/" |grep -E "/toolchain-.*_gcc-${gcc_ver}_${abi}/$")

          tar -C $SDK_ROOT -xf $SDK_PATH.tar.xz --strip-components 3 $full_root
          rm -rf $SDK_ROOT/bin $SDK_ROOT/libexec
      - name: Populate depedencies
        run: sudo apt-get update -qq && sudo apt-get install -y cmake ninja-build
      - name: Set clang environment
        run: |
          echo "CC=${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/clang" >> $GITHUB_ENV
          echo "CXX=${{ github.workspace }}/third_party/llvm-build/Release+Asserts/bin/clang++" >> $GITHUB_ENV
      - name: Build TGZ packages
        run: |
          echo "#define _LIBCPP_HAS_MUSL_LIBC" >> ./third_party/libc++/__config_site
          ./tools/build --variant cli --arch ${{ matrix.arch }} --system linux --subsystem musl --sysroot ${{ env.SDK_ROOT }} -build-benchmark -build-test -nc
          ./tools/build --variant server --arch ${{ matrix.arch }} --system linux --subsystem musl --sysroot ${{ env.SDK_ROOT }} -build-benchmark -build-test -nc
      - name: Upload dist tarball (including debuginfo)
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} yass*.tgz
