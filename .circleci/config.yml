# Copyright (c) 2023 Chilledheart

# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  update-submodule:
    steps:
      - run:
          command: |
            git submodule update --init --depth 1

  download-toolchain:
    steps:
      - run:
          command: |
            ./scripts/download-clang-prebuilt-binaries.py
            rm -f third_party/llvm-build/Release+Asserts/*.tgz

  download-toolchain-clang:
    steps:
      - run:
          command: |
            curl -L -O https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz
            tar -C third_party -xvf clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz \
              clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/lib/clang/12.0.1/include \
              clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/{clang,clang++,clang-12,ld.lld,lld,llvm-ar,llvm-ranlib}
            rm -f *.xz

  download-toolchain-gcc:
    steps:
      - run:
          command: |
            sudo apt-get update -qq
            sudo apt-get install -y build-essential

  download-toolchain-arm:
    steps:
      - run:
          command: |
            sudo apt-get update -qq
            sudo apt-get install -y clang

  install-deps:
    steps:
      - run:
          command: |
            sudo apt-get update -qq
            sudo apt-get install -y cmake ninja-build libgtk-3-dev libncurses5 gettext libcurl4-openssl-dev

  configure:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/clang"
            export "CXX=$PWD/third_party/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release ..

  configure-gcc:
    steps:
      - run:
          command: |
            export "CC=gcc"
            export "CXX=g++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DUSE_LIBCXX=off ..

  configure-without-libcxx:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/clang"
            export "CXX=$PWD/third_party/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DUSE_LIBCXX=off ..

  configure-arm:
    steps:
      - run:
          command: |
            export "CC=clang"
            export "CXX=clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release ..

  configure-asan:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang"
            export "CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DASAN=on ..

  configure-ubsan:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang"
            export "CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DUBSAN=on -DUSE_LIBCXX=off ..

  configure-tsan:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang"
            export "CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DTSAN=on ..

  configure-msan:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang"
            export "CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DMSAN=on -DUSE_CURL=off ..

  build:
    steps:
      - run:
          command: |
            ninja -C build yass yass_test

  test:
    steps:
      - run:
          command: |
            ./build/yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=5 --gtest_throw_on_failure
            # somehow inside the container DNS hosts file resolves localhost to 127.0.0.1 only not ::1
            # due to the incompleteness
            grep localhost /etc/hosts
            sudo sed -i s/ip6-localhost/localhost/g /etc/hosts
            ./build/yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=5 --gtest_throw_on_failure --ipv6_mode


executors:
  ubuntu:
    machine:
      image: ubuntu-2004:202010-01

jobs:
  basic:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps
      - download-toolchain-clang
      - configure
      - build
      - test

  basic-gcc:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps
      - download-toolchain-gcc
      - configure-gcc
      - build
      - test

  basic-without-libcxx:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps
      - download-toolchain-clang
      - configure-without-libcxx
      - build
      - test

  arm:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    steps:
      - checkout
      - update-submodule
      - install-deps
      - download-toolchain-arm
      - configure-arm
      - build
      - test

  basic-asan:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps
      - download-toolchain
      - configure-asan
      - build
      - test

  basic-ubsan:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps
      - download-toolchain
      - configure-ubsan
      - build
      - test

  basic-tsan:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps
      - download-toolchain
      - configure-tsan
      - build
      - test

  basic-msan:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps
      - download-toolchain
      - configure-msan
      - build
      - test

workflows:
  x64-basic:
    jobs:
      - basic

  x64-basic-gcc:
    jobs:
      - basic-gcc

  x64-basic-without-libcxx:
    jobs:
      - basic-without-libcxx

  arm-basic:
    jobs:
      - basic

  x64-asan:
    jobs:
      - basic-asan

  x64-ubsan:
    jobs:
      - basic-ubsan

  x64-tsan:
    jobs:
      - basic-tsan

  x64-msan:
    jobs:
      - basic-msan
