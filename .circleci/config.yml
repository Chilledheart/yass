# Copyright (c) 2023 Chilledheart

# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  update-submodule:
    steps:
      - run:
          command: |
            git submodule update --init --depth 1

  download-toolchain:
    steps:
      - run:
          command: |
            ./scripts/download-clang-prebuilt-binaries.py
            rm -f third_party/llvm-build/Release+Asserts/*.tgz

  download-toolchain-clang:
    steps:
      - run:
          command: |
            curl -L -O https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04.tar.xz
            tar -C third_party -xvf clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04.tar.xz \
              clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04/lib/clang/17/include \
              clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04/bin/{clang,clang++,clang-17,ld.lld,lld,llvm-ar,llvm-ranlib}
            rm -f *.xz

  download-toolchain-gcc:
    steps:
      - run:
          command: |
            sudo apt-get update -qq
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential

  download-toolchain-arm:
    steps:
      - run:
          command: |
            sudo apt-get update -qq
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y clang

  install-deps-gtk3:
    steps:
      - run:
          command: |
            sudo apt-get update -qq
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y cmake ninja-build libgtk-3-dev libncurses5 gettext libcurl4-openssl-dev dpkg-dev
            curl -L -O https://github.com/Kitware/CMake/releases/download/v3.28.5/cmake-3.28.5-linux-x86_64.tar.gz
            sudo tar -C /usr/local --strip-components=1 -xf cmake-3.28.5-linux-x86_64.tar.gz
            cmake --version
            rm -f *.tar.gz

  install-deps-qt6:
    steps:
      - run:
          command: |
            sudo apt-get update -qq
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y cmake ninja-build qt6-base-dev qt6-tools-dev qt6-tools-dev-tools libglx-dev libgl1-mesa-dev qt6-l10n-tools libncurses5 gettext libcurl4-openssl-dev dpkg-dev
            curl -L -O https://github.com/Kitware/CMake/releases/download/v3.28.5/cmake-3.28.5-linux-x86_64.tar.gz
            sudo tar -C /usr/local --strip-components=1 -xf cmake-3.28.5-linux-x86_64.tar.gz
            cmake --version
            rm -f *.tar.gz

  install-deps-golang:
    steps:
      - run:
          command: |
            BUILD_ARCH=$(dpkg-architecture -q DEB_BUILD_ARCH)
            cd /tmp
            # shipped with debian bookworm
            curl -O http://ftp.us.debian.org/debian/pool/main/g/golang-defaults/golang_1.19~1_${BUILD_ARCH}.deb
            curl -O http://ftp.us.debian.org/debian/pool/main/g/golang-defaults/golang-go_1.19~1_${BUILD_ARCH}.deb
            curl -O http://ftp.us.debian.org/debian/pool/main/g/golang-defaults/golang-src_1.19~1_all.deb
            curl -O http://ftp.us.debian.org/debian/pool/main/g/golang-defaults/golang-doc_1.19~1_all.deb
            curl -O http://ftp.us.debian.org/debian/pool/main/g/golang-1.19/golang-1.19_1.19.8-2_all.deb
            curl -O http://ftp.us.debian.org/debian/pool/main/g/golang-1.19/golang-1.19-go_1.19.8-2_${BUILD_ARCH}.deb
            curl -O http://ftp.us.debian.org/debian/pool/main/g/golang-1.19/golang-1.19-src_1.19.8-2_all.deb
            curl -O http://ftp.us.debian.org/debian/pool/main/g/golang-1.19/golang-1.19-doc_1.19.8-2_all.deb
            sudo dpkg --force-depends -i $PWD/*.deb || true
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y -f
            rm -vf *.deb

  configure:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04/bin/clang"
            export "CXX=$PWD/third_party/clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DBORINGSSL_BUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DUSE_TCMALLOC=on ..

  configure-qt6:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04/bin/clang"
            export "CXX=$PWD/third_party/clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DUSE_QT6=on -DBUILD_TESTS=on -DBORINGSSL_BUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DUSE_TCMALLOC=on ..

  configure-gcc:
    steps:
      - run:
          command: |
            export "CC=gcc"
            export "CXX=g++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DBORINGSSL_BUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DUSE_LIBCXX=off -DUSE_TCMALLOC=on ..

  configure-without-libcxx:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04/bin/clang"
            export "CXX=$PWD/third_party/clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DBORINGSSL_BUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DUSE_LIBCXX=off -DUSE_TCMALLOC=on ..

  configure-arm:
    steps:
      - run:
          command: |
            export "CC=clang"
            export "CXX=clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DBORINGSSL_BUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release ..

  configure-asan:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang"
            export "CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DBORINGSSL_BUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DASAN=on ..

  configure-ubsan:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang"
            export "CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DBORINGSSL_BUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DUBSAN=on -DUSE_LIBCXX=off ..

  configure-tsan:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang"
            export "CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DBORINGSSL_BUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DTSAN=on ..

  configure-msan:
    steps:
      - run:
          command: |
            export "CC=$PWD/third_party/llvm-build/Release+Asserts/bin/clang"
            export "CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++"
            mkdir build
            cd build
            cmake -G Ninja -DGUI=on -DBUILD_TESTS=on -DBORINGSSL_BUILD_TESTS=on -DCMAKE_BUILD_TYPE=Release -DMSAN=on -DUSE_CURL=off ..

  build:
    steps:
      - run:
          command: |
            ninja -C build yass yass_test all_tests bssl_shim handshaker

  test:
    steps:
      - run:
          command: |
            # TODO remove this once upstream fix is available
            # msan fix is here https://github.com/llvm/llvm-project/pull/85142
            sudo sysctl -w vm.mmap_rnd_bits=28
            ./build/yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=3 --gtest_throw_on_failure
            ./build/yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=3 --gtest_throw_on_failure --enable_post_quantum_kyber
            # TODO move this to gtest
            # test SOCKS5 without auth
            ./build/yass_test --gtest_filter="Ss*/SOCKS5" --username '' --password ''
            ./build/yass_test --gtest_filter="Ss*/SOCKS5H" --username '' --password ''
            # test HTTPS/HTTP2 without auth
            ./build/yass_test --gtest_filter="Ss*/HTTP*" --username '' --password ''
            # somehow inside the container DNS hosts file resolves localhost to 127.0.0.1 only not ::1
            # due to the incompleteness
            grep localhost /etc/hosts
            sudo sed -i s/ip6-localhost/localhost/g /etc/hosts
            ./build/yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=3 --gtest_throw_on_failure --ipv6_mode
            ./build/yass_test -logtostderr -v 1 --gtest_shuffle --gtest_repeat=3 --gtest_throw_on_failure --ipv6_mode --enable_post_quantum_kyber
            # alternative for ninja -C build run_tests
            ninja -C build check_boringssl

executors:
  ubuntu:
    machine:
      image: ubuntu-2204:2024.01.1

jobs:
  basic:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps-gtk3
      - install-deps-golang
      - download-toolchain-clang
      - configure
      - build
      - test

  basic-qt6:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps-qt6
      - install-deps-golang
      - download-toolchain-clang
      - configure-qt6
      - build
      - test

  basic-gcc:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps-gtk3
      - install-deps-golang
      - download-toolchain-gcc
      - configure-gcc
      - build
      - test

  basic-without-libcxx:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps-gtk3
      - install-deps-golang
      - download-toolchain-clang
      - configure-without-libcxx
      - build
      - test

  arm:
    machine:
      image: ubuntu-2204:2023.07.2
    resource_class: arm.medium
    steps:
      - checkout
      - update-submodule
      - install-deps-gtk3
      - install-deps-golang
      - download-toolchain-arm
      - configure-arm
      - build
      - test

  basic-asan:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps-gtk3
      - install-deps-golang
      - download-toolchain
      - configure-asan
      - build
      - test

  basic-ubsan:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps-gtk3
      - install-deps-golang
      - download-toolchain
      - configure-ubsan
      - build
      - test

  basic-tsan:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps-gtk3
      - install-deps-golang
      - download-toolchain
      - configure-tsan
      - build
      - test

  basic-msan:
    executor: ubuntu
    steps:
      - checkout
      - update-submodule
      - install-deps-gtk3
      - install-deps-golang
      - download-toolchain
      - configure-msan
      - build
      - test

workflows:
  x64-basic:
    jobs:
      - basic

  x64-basic-qt6:
    jobs:
      - basic-qt6

  x64-basic-gcc:
    jobs:
      - basic-gcc

  x64-basic-without-libcxx:
    jobs:
      - basic-without-libcxx

  arm-basic:
    jobs:
      - basic

  x64-asan:
    jobs:
      - basic-asan

  x64-ubsan:
    jobs:
      - basic-ubsan

  x64-tsan:
    jobs:
      - basic-tsan

  x64-msan:
    jobs:
      - basic-msan
