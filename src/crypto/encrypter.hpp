//
// encrypter.hpp
// ~~~~~~~~~~~~~
//
// Copyright (c) 2019 James Hu (hukeyue at hotmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef H_CRYPTO_ENCRYPTER
#define H_CRYPTO_ENCRYPTER

#include "crypto/crypter.hpp"

#include <stddef.h>
#include <stdint.h>
#include <string>
#include <memory>

namespace crypto {

class Encrypter : public Crypter {
public:
  virtual ~Encrypter();

  static std::unique_ptr<Encrypter> CreateFromCipherSuite(
      uint32_t cipher_suite);

  // Writes encrypted |plaintext| and a MAC over |plaintext| and
  // |associated_data| into output. Sets |output_length| to the number of
  // bytes written. Returns true on success or false if there was an error.
  // |packet_number| is appended to the |nonce_prefix| value provided in
  // SetNoncePrefix() to form the nonce. |output| must not overlap with
  // |associated_data|. If |output| overlaps with |plaintext| then
  // |plaintext| must be <= |output|.
  virtual bool EncryptPacket(uint64_t packet_number,
                             const char *associated_data,
                             size_t associated_data_len,
                             const char *plaintext,
                             size_t plaintext_len,
                             char *output,
                             size_t *output_length,
                             size_t max_output_length) = 0;

#if 0
  // Takes a |sample| of ciphertext and uses the header protection key to
  // generate a mask to use for header protection, and returns that mask. On
  // success, the mask will be at least 5 bytes long; on failure the string will
  // be empty.
  virtual std::string GenerateHeaderProtectionMask(QuicStringPiece sample) = 0;
#endif

  // Returns the maximum length of plaintext that can be encrypted
  // to ciphertext no larger than |ciphertext_size|.
  virtual size_t GetMaxPlaintextSize(size_t ciphertext_size) const = 0;

  // Returns the length of the ciphertext that would be generated by encrypting
  // to plaintext of size |plaintext_size|.
  virtual size_t GetCiphertextSize(size_t plaintext_size) const = 0;

  // The ID of the cipher. Return 0x03000000 ORed with the 'cryptographic suite
  // selector'.
  virtual uint32_t cipher_id() const = 0;

  // For use by unit tests only.
  virtual const uint8_t *GetKey() const = 0;
  virtual const uint8_t *GetNoncePrefix() const = 0;
};

} // namespace crypto

#endif // H_CRYPTO_ENCRYPTER
