//
// pr_error.hpp
// ~~~~~~~~~~~~
//
// Copyright (c) 2019 James Hu (hukeyue at hotmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
#ifndef PR_ERROR
#define PR_ERROR

#include <stdint.h>

/*
 *
 * prerr.h
 * This file is automatically generated; please do not edit it.
 */

/* Memory allocation attempt failed */
#define PR_OUT_OF_MEMORY_ERROR                   (-6000L)

/* Invalid file descriptor */
#define PR_BAD_DESCRIPTOR_ERROR                  (-5999L)

/* The operation would have blocked */
#define PR_WOULD_BLOCK_ERROR                     (-5998L)

/* Invalid memory address argument */
#define PR_ACCESS_FAULT_ERROR                    (-5997L)

/* Invalid function for file type */
#define PR_INVALID_METHOD_ERROR                  (-5996L)

/* Invalid memory address argument */
#define PR_ILLEGAL_ACCESS_ERROR                  (-5995L)

/* Some unknown error has occurred */
#define PR_UNKNOWN_ERROR                         (-5994L)

/* Operation interrupted by another thread */
#define PR_PENDING_INTERRUPT_ERROR               (-5993L)

/* function not implemented */
#define PR_NOT_IMPLEMENTED_ERROR                 (-5992L)

/* I/O function error */
#define PR_IO_ERROR                              (-5991L)

/* I/O operation timed out */
#define PR_IO_TIMEOUT_ERROR                      (-5990L)

/* I/O operation on busy file descriptor */
#define PR_IO_PENDING_ERROR                      (-5989L)

/* The directory could not be opened */
#define PR_DIRECTORY_OPEN_ERROR                  (-5988L)

/* Invalid function argument */
#define PR_INVALID_ARGUMENT_ERROR                (-5987L)

/* Network address not available (in use?) */
#define PR_ADDRESS_NOT_AVAILABLE_ERROR           (-5986L)

/* Network address type not supported */
#define PR_ADDRESS_NOT_SUPPORTED_ERROR           (-5985L)

/* Already connected */
#define PR_IS_CONNECTED_ERROR                    (-5984L)

/* Network address is invalid */
#define PR_BAD_ADDRESS_ERROR                     (-5983L)

/* Local Network address is in use */
#define PR_ADDRESS_IN_USE_ERROR                  (-5982L)

/* Connection refused by peer */
#define PR_CONNECT_REFUSED_ERROR                 (-5981L)

/* Network address is presently unreachable */
#define PR_NETWORK_UNREACHABLE_ERROR             (-5980L)

/* Connection attempt timed out */
#define PR_CONNECT_TIMEOUT_ERROR                 (-5979L)

/* Network file descriptor is not connected */
#define PR_NOT_CONNECTED_ERROR                   (-5978L)

/* Failure to load dynamic library */
#define PR_LOAD_LIBRARY_ERROR                    (-5977L)

/* Failure to unload dynamic library */
#define PR_UNLOAD_LIBRARY_ERROR                  (-5976L)

/* Symbol not found in any of the loaded dynamic libraries */
#define PR_FIND_SYMBOL_ERROR                     (-5975L)

/* Insufficient system resources */
#define PR_INSUFFICIENT_RESOURCES_ERROR          (-5974L)

/* A directory lookup on a network address has failed */
#define PR_DIRECTORY_LOOKUP_ERROR                (-5973L)

/* Attempt to access a TPD key that is out of range */
#define PR_TPD_RANGE_ERROR                       (-5972L)

/* Process open FD table is full */
#define PR_PROC_DESC_TABLE_FULL_ERROR            (-5971L)

/* System open FD table is full */
#define PR_SYS_DESC_TABLE_FULL_ERROR             (-5970L)

/* Network operation attempted on non-network file descriptor */
#define PR_NOT_SOCKET_ERROR                      (-5969L)

/* TCP-specific function attempted on a non-TCP file descriptor */
#define PR_NOT_TCP_SOCKET_ERROR                  (-5968L)

/* TCP file descriptor is already bound */
#define PR_SOCKET_ADDRESS_IS_BOUND_ERROR         (-5967L)

/* Access Denied */
#define PR_NO_ACCESS_RIGHTS_ERROR                (-5966L)

/* The requested operation is not supported by the platform */
#define PR_OPERATION_NOT_SUPPORTED_ERROR         (-5965L)

/* The host operating system does not support the protocol requested */
#define PR_PROTOCOL_NOT_SUPPORTED_ERROR          (-5964L)

/* Access to the remote file has been severed */
#define PR_REMOTE_FILE_ERROR                     (-5963L)

/* The value requested is too large to be stored in the data buffer provided */
#define PR_BUFFER_OVERFLOW_ERROR                 (-5962L)

/* TCP connection reset by peer */
#define PR_CONNECT_RESET_ERROR                   (-5961L)

/* Unused */
#define PR_RANGE_ERROR                           (-5960L)

/* The operation would have deadlocked */
#define PR_DEADLOCK_ERROR                        (-5959L)

/* The file is already locked */
#define PR_FILE_IS_LOCKED_ERROR                  (-5958L)

/* Write would result in file larger than the system allows */
#define PR_FILE_TOO_BIG_ERROR                    (-5957L)

/* The device for storing the file is full */
#define PR_NO_DEVICE_SPACE_ERROR                 (-5956L)

/* Unused */
#define PR_PIPE_ERROR                            (-5955L)

/* Unused */
#define PR_NO_SEEK_DEVICE_ERROR                  (-5954L)

/* Cannot perform a normal file operation on a directory */
#define PR_IS_DIRECTORY_ERROR                    (-5953L)

/* Symbolic link loop */
#define PR_LOOP_ERROR                            (-5952L)

/* File name is too long */
#define PR_NAME_TOO_LONG_ERROR                   (-5951L)

/* File not found */
#define PR_FILE_NOT_FOUND_ERROR                  (-5950L)

/* Cannot perform directory operation on a normal file */
#define PR_NOT_DIRECTORY_ERROR                   (-5949L)

/* Cannot write to a read-only file system */
#define PR_READ_ONLY_FILESYSTEM_ERROR            (-5948L)

/* Cannot delete a directory that is not empty */
#define PR_DIRECTORY_NOT_EMPTY_ERROR             (-5947L)

/* Cannot delete or rename a file object while the file system is busy */
#define PR_FILESYSTEM_MOUNTED_ERROR              (-5946L)

/* Cannot rename a file to a file system on another device */
#define PR_NOT_SAME_DEVICE_ERROR                 (-5945L)

/* The directory object in the file system is corrupted */
#define PR_DIRECTORY_CORRUPTED_ERROR             (-5944L)

/* Cannot create or rename a filename that already exists */
#define PR_FILE_EXISTS_ERROR                     (-5943L)

/* Directory is full.  No additional filenames may be added */
#define PR_MAX_DIRECTORY_ENTRIES_ERROR           (-5942L)

/* The required device was in an invalid state */
#define PR_INVALID_DEVICE_STATE_ERROR            (-5941L)

/* The device is locked */
#define PR_DEVICE_IS_LOCKED_ERROR                (-5940L)

/* No more entries in the directory */
#define PR_NO_MORE_FILES_ERROR                   (-5939L)

/* Encountered end of file */
#define PR_END_OF_FILE_ERROR                     (-5938L)

/* Seek error */
#define PR_FILE_SEEK_ERROR                       (-5937L)

/* The file is busy */
#define PR_FILE_IS_BUSY_ERROR                    (-5936L)

/* The I/O operation was aborted */
#define PR_OPERATION_ABORTED_ERROR               (-5935L)

/* Operation is still in progress (probably a non-blocking connect) */
#define PR_IN_PROGRESS_ERROR                     (-5934L)

/* Operation has already been initiated (probably a non-blocking connect) */
#define PR_ALREADY_INITIATED_ERROR               (-5933L)

/* The wait group is empty */
#define PR_GROUP_EMPTY_ERROR                     (-5932L)

/* Object state improper for request */
#define PR_INVALID_STATE_ERROR                   (-5931L)

/* Network is down */
#define PR_NETWORK_DOWN_ERROR                    (-5930L)

/* Socket shutdown */
#define PR_SOCKET_SHUTDOWN_ERROR                 (-5929L)

/* Connection aborted */
#define PR_CONNECT_ABORTED_ERROR                 (-5928L)

/* Host is unreachable */
#define PR_HOST_UNREACHABLE_ERROR                (-5927L)

/* The library is not loaded */
#define PR_LIBRARY_NOT_LOADED_ERROR              (-5926L)

/* The one-time function was previously called and failed. Its error code is no longer available */
#define PR_CALL_ONCE_ERROR                       (-5925L)

/* Placeholder for the end of the list */
#define PR_MAX_ERROR                             (-5924L)

typedef int32_t PRErrorCode;

/*
** Set error will preserve an error condition within a thread context.
** The values stored are the NSPR (platform independent) translation of
** the error. Also, if available, the platform specific oserror is stored.
** If there is no appropriate OS error number, a zero my be supplied.
*/
void PR_SetError(PRErrorCode errorCode, int32_t oserr);

/*
** The text value specified may be NULL. If it is not NULL and the text length
** is zero, the string is assumed to be a null terminated C string. Otherwise
** the text is assumed to be the length specified and possibly include NULL
** characters (e.g., a multi-national string).
**
** The text will be copied into to thread structure and remain there
** until the next call to PR_SetError.
*/
void PR_SetErrorText(
    int textLength, const char *text);

/*
** Return the current threads last set error code.
*/
PRErrorCode PR_GetError(void);

/*
** Return the current threads last set os error code. This is used for
** machine specific code that desires the underlying os error.
*/
int32_t PR_GetOSError(void);

/*
** Get the length of the error text. If a zero is returned, then there
** is no text. Otherwise, the value returned is sufficient to contain
** the error text currently available.
*/
int32_t PR_GetErrorTextLength(void);

/*
** Copy the current threads current error text. Then actual number of bytes
** copied is returned as the result. If the result is zero, the 'text' area
** is unaffected.
*/
int32_t PR_GetErrorText(char *text);

#ifdef _WIN32
#include <winsock2.h>
#define _MD_EACCES                WSAEACCES
#define _MD_EADDRINUSE            WSAEADDRINUSE
#define _MD_EADDRNOTAVAIL         WSAEADDRNOTAVAIL
#define _MD_EAFNOSUPPORT          WSAEAFNOSUPPORT
#define _MD_EAGAIN                WSAEWOULDBLOCK
#define _MD_EALREADY              WSAEALREADY
#define _MD_EBADF                 WSAEBADF
#define _MD_ECONNREFUSED          WSAECONNREFUSED
#define _MD_ECONNRESET            WSAECONNRESET
#define _MD_EFAULT                WSAEFAULT
#define _MD_EINPROGRESS           WSAEINPROGRESS
#define _MD_EINTR                 WSAEINTR
#define _MD_EINVAL                EINVAL
#define _MD_EISCONN               WSAEISCONN
#define _MD_ENETUNREACH           WSAENETUNREACH
#define _MD_ENOENT                ENOENT
#define _MD_ENOTCONN              WSAENOTCONN
#define _MD_ENOTSOCK              WSAENOTSOCK
#define _MD_EOPNOTSUPP            WSAEOPNOTSUPP
#define _MD_EWOULDBLOCK           WSAEWOULDBLOCK
#define _MD_GET_SOCKET_ERROR()    WSAGetLastError()
#define _MD_SET_SOCKET_ERROR(_err) WSASetLastError(_err)

extern void _MD_win32_map_default_error(int32_t err);
#define _PR_MD_MAP_DEFAULT_ERROR	_MD_win32_map_default_error

extern void _MD_win32_map_opendir_error(int32_t err);
#define	_PR_MD_MAP_OPENDIR_ERROR	_MD_win32_map_opendir_error

extern void _MD_win32_map_closedir_error(int32_t err);
#define	_PR_MD_MAP_CLOSEDIR_ERROR	_MD_win32_map_closedir_error

extern void _MD_unix_readdir_error(int32_t err);
#define	_PR_MD_MAP_READDIR_ERROR	_MD_unix_readdir_error

extern void _MD_win32_map_delete_error(int32_t err);
#define	_PR_MD_MAP_DELETE_ERROR	_MD_win32_map_delete_error

extern void _MD_win32_map_stat_error(int32_t err);
#define	_PR_MD_MAP_STAT_ERROR	_MD_win32_map_stat_error

extern void _MD_win32_map_fstat_error(int32_t err);
#define	_PR_MD_MAP_FSTAT_ERROR	_MD_win32_map_fstat_error

extern void _MD_win32_map_rename_error(int32_t err);
#define	_PR_MD_MAP_RENAME_ERROR	_MD_win32_map_rename_error

extern void _MD_win32_map_access_error(int32_t err);
#define	_PR_MD_MAP_ACCESS_ERROR	_MD_win32_map_access_error

extern void _MD_win32_map_mkdir_error(int32_t err);
#define	_PR_MD_MAP_MKDIR_ERROR	_MD_win32_map_mkdir_error

extern void _MD_win32_map_rmdir_error(int32_t err);
#define	_PR_MD_MAP_RMDIR_ERROR	_MD_win32_map_rmdir_error

extern void _MD_win32_map_read_error(int32_t err);
#define	_PR_MD_MAP_READ_ERROR	_MD_win32_map_read_error

extern void _MD_win32_map_transmitfile_error(int32_t err);
#define	_PR_MD_MAP_TRANSMITFILE_ERROR	_MD_win32_map_transmitfile_error

extern void _MD_win32_map_write_error(int32_t err);
#define	_PR_MD_MAP_WRITE_ERROR	_MD_win32_map_write_error

extern void _MD_win32_map_lseek_error(int32_t err);
#define	_PR_MD_MAP_LSEEK_ERROR	_MD_win32_map_lseek_error

extern void _MD_win32_map_fsync_error(int32_t err);
#define	_PR_MD_MAP_FSYNC_ERROR	_MD_win32_map_fsync_error

extern void _MD_win32_map_close_error(int32_t err);
#define	_PR_MD_MAP_CLOSE_ERROR	_MD_win32_map_close_error

extern void _MD_win32_map_socket_error(int32_t err);
#define	_PR_MD_MAP_SOCKET_ERROR	_MD_win32_map_socket_error

extern void _MD_win32_map_recv_error(int32_t err);
#define	_PR_MD_MAP_RECV_ERROR	_MD_win32_map_recv_error

extern void _MD_win32_map_recvfrom_error(int32_t err);
#define	_PR_MD_MAP_RECVFROM_ERROR	_MD_win32_map_recvfrom_error

extern void _MD_win32_map_send_error(int32_t err);
#define	_PR_MD_MAP_SEND_ERROR	_MD_win32_map_send_error

extern void _MD_win32_map_sendto_error(int32_t err);
#define	_PR_MD_MAP_SENDTO_ERROR	_MD_win32_map_sendto_error

extern void _MD_win32_map_accept_error(int32_t err);
#define	_PR_MD_MAP_ACCEPT_ERROR	_MD_win32_map_accept_error

extern void _MD_win32_map_acceptex_error(int32_t err);
#define	_PR_MD_MAP_ACCEPTEX_ERROR	_MD_win32_map_acceptex_error

extern void _MD_win32_map_connect_error(int32_t err);
#define	_PR_MD_MAP_CONNECT_ERROR	_MD_win32_map_connect_error

extern void _MD_win32_map_bind_error(int32_t err);
#define	_PR_MD_MAP_BIND_ERROR	_MD_win32_map_bind_error

extern void _MD_win32_map_listen_error(int32_t err);
#define	_PR_MD_MAP_LISTEN_ERROR	_MD_win32_map_listen_error

extern void _MD_win32_map_shutdown_error(int32_t err);
#define	_PR_MD_MAP_SHUTDOWN_ERROR	_MD_win32_map_shutdown_error

extern void _MD_win32_map_getsockname_error(int32_t err);
#define	_PR_MD_MAP_GETSOCKNAME_ERROR	_MD_win32_map_getsockname_error

extern void _MD_win32_map_getpeername_error(int32_t err);
#define	_PR_MD_MAP_GETPEERNAME_ERROR	_MD_win32_map_getpeername_error

extern void _MD_win32_map_getsockopt_error(int32_t err);
#define	_PR_MD_MAP_GETSOCKOPT_ERROR	_MD_win32_map_getsockopt_error

extern void _MD_win32_map_setsockopt_error(int32_t err);
#define	_PR_MD_MAP_SETSOCKOPT_ERROR	_MD_win32_map_setsockopt_error

extern void _MD_win32_map_open_error(int32_t err);
#define	_PR_MD_MAP_OPEN_ERROR	_MD_win32_map_open_error

extern void _MD_win32_map_gethostname_error(int32_t err);
#define	_PR_MD_MAP_GETHOSTNAME_ERROR	_MD_win32_map_gethostname_error

extern void _MD_win32_map_select_error(int32_t err);
#define	_PR_MD_MAP_SELECT_ERROR	_MD_win32_map_select_error

extern void _MD_win32_map_lockf_error(int err);
#define _PR_MD_MAP_LOCKF_ERROR  _MD_win32_map_lockf_error

#else
#include <errno.h>
#define _MD_ERRNO()             	(errno)
#define _MD_GET_SOCKET_ERROR()		(errno)

extern void _MD_unix_map_default_error(int err);
#define	_PR_MD_MAP_DEFAULT_ERROR	_MD_unix_map_default_error

extern void _MD_unix_map_opendir_error(int err);
#define	_PR_MD_MAP_OPENDIR_ERROR	_MD_unix_map_opendir_error

extern void _MD_unix_map_closedir_error(int err);
#define	_PR_MD_MAP_CLOSEDIR_ERROR	_MD_unix_map_closedir_error

extern void _MD_unix_readdir_error(int err);
#define	_PR_MD_MAP_READDIR_ERROR	_MD_unix_readdir_error

extern void _MD_unix_map_unlink_error(int err);
#define	_PR_MD_MAP_UNLINK_ERROR	_MD_unix_map_unlink_error

extern void _MD_unix_map_stat_error(int err);
#define	_PR_MD_MAP_STAT_ERROR	_MD_unix_map_stat_error

extern void _MD_unix_map_fstat_error(int err);
#define	_PR_MD_MAP_FSTAT_ERROR	_MD_unix_map_fstat_error

extern void _MD_unix_map_rename_error(int err);
#define	_PR_MD_MAP_RENAME_ERROR	_MD_unix_map_rename_error

extern void _MD_unix_map_access_error(int err);
#define	_PR_MD_MAP_ACCESS_ERROR	_MD_unix_map_access_error

extern void _MD_unix_map_mkdir_error(int err);
#define	_PR_MD_MAP_MKDIR_ERROR	_MD_unix_map_mkdir_error

extern void _MD_unix_map_rmdir_error(int err);
#define	_PR_MD_MAP_RMDIR_ERROR	_MD_unix_map_rmdir_error

extern void _MD_unix_map_read_error(int err);
#define	_PR_MD_MAP_READ_ERROR	_MD_unix_map_read_error

extern void _MD_unix_map_write_error(int err);
#define	_PR_MD_MAP_WRITE_ERROR	_MD_unix_map_write_error

extern void _MD_unix_map_lseek_error(int err);
#define	_PR_MD_MAP_LSEEK_ERROR	_MD_unix_map_lseek_error

extern void _MD_unix_map_fsync_error(int err);
#define	_PR_MD_MAP_FSYNC_ERROR	_MD_unix_map_fsync_error

extern void _MD_unix_map_close_error(int err);
#define	_PR_MD_MAP_CLOSE_ERROR	_MD_unix_map_close_error

extern void _MD_unix_map_socket_error(int err);
#define	_PR_MD_MAP_SOCKET_ERROR	_MD_unix_map_socket_error

extern void _MD_unix_map_socketavailable_error(int err);
#define	_PR_MD_MAP_SOCKETAVAILABLE_ERROR	_MD_unix_map_socketavailable_error

extern void _MD_unix_map_recv_error(int err);
#define	_PR_MD_MAP_RECV_ERROR	_MD_unix_map_recv_error

extern void _MD_unix_map_recvfrom_error(int err);
#define	_PR_MD_MAP_RECVFROM_ERROR	_MD_unix_map_recvfrom_error

extern void _MD_unix_map_send_error(int err);
#define	_PR_MD_MAP_SEND_ERROR	_MD_unix_map_send_error

extern void _MD_unix_map_sendto_error(int err);
#define	_PR_MD_MAP_SENDTO_ERROR	_MD_unix_map_sendto_error

extern void _MD_unix_map_writev_error(int err);
#define	_PR_MD_MAP_WRITEV_ERROR	_MD_unix_map_writev_error

extern void _MD_unix_map_accept_error(int err);
#define	_PR_MD_MAP_ACCEPT_ERROR	_MD_unix_map_accept_error

extern void _MD_unix_map_connect_error(int err);
#define	_PR_MD_MAP_CONNECT_ERROR	_MD_unix_map_connect_error

extern void _MD_unix_map_bind_error(int err);
#define	_PR_MD_MAP_BIND_ERROR	_MD_unix_map_bind_error

extern void _MD_unix_map_listen_error(int err);
#define	_PR_MD_MAP_LISTEN_ERROR	_MD_unix_map_listen_error

extern void _MD_unix_map_shutdown_error(int err);
#define	_PR_MD_MAP_SHUTDOWN_ERROR	_MD_unix_map_shutdown_error

extern void _MD_unix_map_socketpair_error(int err);
#define	_PR_MD_MAP_SOCKETPAIR_ERROR	_MD_unix_map_socketpair_error

extern void _MD_unix_map_getsockname_error(int err);
#define	_PR_MD_MAP_GETSOCKNAME_ERROR	_MD_unix_map_getsockname_error

extern void _MD_unix_map_getpeername_error(int err);
#define	_PR_MD_MAP_GETPEERNAME_ERROR	_MD_unix_map_getpeername_error

extern void _MD_unix_map_getsockopt_error(int err);
#define	_PR_MD_MAP_GETSOCKOPT_ERROR	_MD_unix_map_getsockopt_error

extern void _MD_unix_map_setsockopt_error(int err);
#define	_PR_MD_MAP_SETSOCKOPT_ERROR	_MD_unix_map_setsockopt_error

extern void _MD_unix_map_open_error(int err);
#define	_PR_MD_MAP_OPEN_ERROR	_MD_unix_map_open_error

extern void _MD_unix_map_mmap_error(int err);
#define	_PR_MD_MAP_MMAP_ERROR	_MD_unix_map_mmap_error

extern void _MD_unix_map_gethostname_error(int err);
#define	_PR_MD_MAP_GETHOSTNAME_ERROR	_MD_unix_map_gethostname_error

extern void _MD_unix_map_select_error(int err);
#define	_PR_MD_MAP_SELECT_ERROR	_MD_unix_map_select_error

extern void _MD_unix_map_poll_error(int err);
#define _PR_MD_MAP_POLL_ERROR _MD_unix_map_poll_error

extern void _MD_unix_map_poll_revents_error(int err);
#define _PR_MD_MAP_POLL_REVENTS_ERROR _MD_unix_map_poll_revents_error

extern void _MD_unix_map_flock_error(int err);
#define	_PR_MD_MAP_FLOCK_ERROR	_MD_unix_map_flock_error

extern void _MD_unix_map_lockf_error(int err);
#define	_PR_MD_MAP_LOCKF_ERROR	_MD_unix_map_lockf_error

#endif

#endif // PR_ERROR

