<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- yass.exe.manifest -->
<!-- reference: https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests -->
<!-- reference: https://docs.microsoft.com/en-us/windows/win32/sysinfo/targeting-your-application-at-windows-8-1 -->
<assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1" xmlns:asmv3="urn:schemas-microsoft-com:asm.v3">
    <!-- reference: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/assemblyidentity-element-for-runtime -->
    <assemblyIdentity
        type="win32"
        name="@YASS_APP_NAME@"
        version="@YASS_APP_FULL_VERSION@"
        processorArchitecture="@MSVC_PROCESSOR_ARCHITECTURE@"
    />
    <description>Yet Another Shadow Socket Application</description>
    <!-- To enable your application to use visual styles, you must use ComCtl32.dll version 6 or later. -->
    <!-- reference: https://docs.microsoft.com/en-us/windows/win32/Controls/cookbook-overview -->
    <dependency>
        <dependentAssembly>
            <assemblyIdentity
                type="win32"
                name="Microsoft.Windows.Common-Controls"
                version="6.0.0.0"
                processorArchitecture="*"
                publicKeyToken="6595b64144ccf1df"
                language="*"
            />
        </dependentAssembly>
    </dependency>
    <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
        <application>
            <!-- This tag is required for XAML islands usage in the process for media scenarios. -->
            <!-- This element is supported in Windows 10, version 1903, and later versions. -->
            <!-- This version corresponds to the Windows 10 May 2019 Update. -->
            <maxversiontested Id="10.0.18362.0"/>
            <!-- Windows 10, Windows 11, Windows Server 2016, Windows Server 2019 and Windows Server 2022 -->
            <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"/>
            <!-- Windows 8.1 and Windows Server 2012 R2 -->
            <supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}"/>
            <!-- Windows 8 and Windows Server 2012 -->
            <supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}"/>
            <!-- Windows 7 and Windows Server 2008 R2 -->
            <supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}"/>
            <!-- Windows Vista and Windows Server 2008 -->
            <supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}"/>
        </application>
    </compatibility>
    <!-- On Windows 10, this element forces a process to use UTF-8 as the process code page. -->
    <!-- reference: https://docs.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page -->
    <asmv3:application>
        <asmv3:windowsSettings xmlns="http://schemas.microsoft.com/SMI/2019/WindowsSettings">
            <activeCodePage>UTF-8</activeCodePage>
        </asmv3:windowsSettings>
    </asmv3:application>
    <!-- Specifies whether the current process is dots per inch (dpi) aware. -->
    <!-- Windows 10, version 1607: The dpiAware element is ignored if the dpiAwareness element is present. -->
    <!-- And the minimum version of the operating system that supports the dpiAwareness element is Windows 10, version 1607.  -->
    <!-- reference: https://docs.microsoft.com/en-us/windows/win32/hidpi/high-dpi-desktop-application-development-on-windows?redirectedfrom=MSDN -->
    <asmv3:application>
        <asmv3:windowsSettings>
            <!-- The dpiAwareness element can contain a single item or a list of comma-separated items.-->
            <!-- In the latter case, the first (leftmost) item in the list recognized by the operating system is used. -->
            <!-- In this way, you can specify different behaviors supported in future Windows operating system versions. -->
            <!-- system: The current process is system dpi aware. -->
            <!-- permonitor: The current process is per-monitor dpi aware. -->
            <!-- permonitorv2: The current process uses the per-monitor-v2 dpi awareness context. This item will only be recognized on Windows 10 version 1703 or later. -->
            <dpiAwareness xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">PerMonitorV2, PerMonitor, system</dpiAwareness>
            <!-- The current process is system dpi aware. -->
            <dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">true</dpiAware>
        </asmv3:windowsSettings>
    </asmv3:application>
    <!-- Enables long paths that exceed MAX_PATH in length. This element is supported in Windows 10, version 1607, and later. -->
    <!-- The Windows API has many functions that also have Unicode versions to permit an extended-length path for a maximum total path length of 32,767 characters. -->
    <!-- These are the directory management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: -->
    <!-- CreateDirectoryW, CreateDirectoryExW GetCurrentDirectoryW RemoveDirectoryW SetCurrentDirectoryW. -->
    <!-- These are the file management functions that no longer have MAX_PATH restrictions if you opt-in to long path behavior: -->
    <!-- CopyFileW, CopyFile2, CopyFileExW, CreateFileW, CreateFile2, CreateHardLinkW, CreateSymbolicLinkW, DeleteFileW, FindFirstFileW, -->
    <!-- FindFirstFileExW, FindNextFileW, GetFileAttributesW, GetFileAttributesExW, SetFileAttributesW, GetFullPathNameW, GetLongPathNameW, -->
    <!-- MoveFileW, MoveFileExW, MoveFileWithProgressW, ReplaceFileW, SearchPathW, FindFirstFileNameW, FindNextFileNameW, FindFirstStreamW, -->
    <!-- FindNextStreamW, GetCompressedFileSizeW, GetFinalPathNameByHandleW. -->
    <!-- reference: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd -->
    <asmv3:application>
        <asmv3:windowsSettings xmlns:ws2="http://schemas.microsoft.com/SMI/2016/WindowsSettings">
            <ws2:longPathAware>true</ws2:longPathAware>
        </asmv3:windowsSettings>
    </asmv3:application>
    <!-- The value SegmentHeap indicates that segment heap will be used. Segment heap is a modern heap implementation that -->
    <!-- will generally reduce your overall memory usage. This element is supported in Windows 10, version 2004 (build 19041) and later. -->
    <!-- However Performance regression seen on chrome with Windows segment heap -->
    <!-- reference: https://bugs.chromium.org/p/chromium/issues/detail?id=1102281 -->
    <!-- reference: https://github.com/microsoft/Windows-Dev-Performance/issues/39 -->
    <!--
    <asmv3:application>
        <asmv3:windowsSettings xmlns="http://schemas.microsoft.com/SMI/2020/WindowsSettings">
            <heapType>SegmentHeap</heapType>
        </asmv3:windowsSettings>
    </asmv3:application>
    -->
    <asmv3:trustInfo xmlns:asmv3="urn:schemas-microsoft-com:asm.v3">
        <asmv3:security>
            <asmv3:requestedPrivileges>
                <!--
                  UAC settings:
                  - app should run at same integrity level as calling process
                  - app does not need to manipulate windows belonging to
                    higher-integrity-level processes
                  -->
                <asmv3:requestedExecutionLevel
                    level="asInvoker"
                    uiAccess="false"
                />
                <!--
                <asmv3:requestedExecutionLevel
                    level="highestAvailable"
                    uiAccess="false"
                />
                  -->
                <!--
                <asmv3:requestedExecutionLevel
                    level="requireAdministrator"
                    uiAccess="false"
                />
                  -->
            </asmv3:requestedPrivileges>
        </asmv3:security>
    </asmv3:trustInfo>
</assembly>
